<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ellios's blog]]></title>
  <link href="http://ellios.github.com//atom.xml" rel="self"/>
  <link href="http://ellios.github.com//"/>
  <updated>2013-04-27T14:55:25+08:00</updated>
  <id>http://ellios.github.com//</id>
  <author>
    <name><![CDATA[ellios]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ganglia python]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-python/"/>
    <updated>2013-04-16T23:30:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-python</id>
    <content type="html"><![CDATA[<p>老大想把我们放在mongdodb的一些统计数据，在Ganglia展示出来，想到Ganglia支持用python来写扩展模块，于是欣然应下，正好也学习下怎么写Ganglia的python扩展模块。</p>

<p>Ganglia要集成python模块是非常容易的，简单的数据展示，只需要写个pyconf后缀的文件和一个python的脚本就好了。Ganglia自身的源码里面也有很多python的模块的源码，其中有一个是专门用来做示例用的，我们就从他开始吧。</p>

<p>首先要弄清楚你需要收集哪些各数据，在pyconf文件中配置你要收集的数据的名称，像下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">modules</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">module</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;example&quot;</span>
</span><span class='line'>    <span class="nx">language</span> <span class="o">=</span> <span class="s2">&quot;python&quot;</span>
</span><span class='line'>    <span class="nx">enabled</span> <span class="o">=</span> <span class="s2">&quot;yes&quot;</span>
</span><span class='line'>    <span class="nx">param</span> <span class="nx">RandomMax</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="mi">600</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">param</span> <span class="nx">ConstantValue</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="mi">112</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">collection_group</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">collect_every</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nx">time_threshold</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>  <span class="nx">metric</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;PyRandom_Numbers&quot;</span>
</span><span class='line'>    <span class="nx">value_threshold</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">collection_group</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">collect_once</span> <span class="o">=</span> <span class="nx">yes</span>
</span><span class='line'>  <span class="nx">time_threshold</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="nx">metric</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;PyConstant_Number&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，modules里面配置了要加载的模块的名称，具体的配置项这里就不纠结了，collection_group里面可以配置你要收集的数据，metric项就是了。</p>

<p>配置文件写好了，下面看看真真干活的模块吧，ganglia的python模块是有一定的规范的，每个模块必要要有 metric_init, metric_cleanup方法，metric_cleanup做些收尾的工作，当gmond关闭时释放资源。metric_init方法做初始化操作，gmond在加载模块时，会先调用metric_init方法。这里你需要定义要收集的数据的详细参数，以及数据的call_back方法。具体看下面吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="n">descriptors</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="n">Random_Max</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="n">Constant_Value</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Random_Numbers</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Return a random number.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">Random_Max</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Constant_Number</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Return a constant number.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">Constant_Value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">metric_init</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Initialize the random number generator and create the</span>
</span><span class='line'><span class="sd">    metric definition dictionary object for each metric.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">descriptors</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">Random_Max</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">Constant_Value</span>
</span><span class='line'>    <span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[pyexample] Received the following parameters&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">params</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;RandomMax&#39;</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
</span><span class='line'>        <span class="n">Random_Max</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;RandomMax&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;ConstantValue&#39;</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
</span><span class='line'>        <span class="n">Constant_Value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ConstantValue&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;PyRandom_Numbers&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;call_back&#39;</span><span class="p">:</span> <span class="n">Random_Numbers</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;time_max&#39;</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;value_type&#39;</span><span class="p">:</span> <span class="s">&#39;uint&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="s">&#39;N&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;slope&#39;</span><span class="p">:</span> <span class="s">&#39;both&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;</span><span class="si">%u</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;Example module metric (random numbers)&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;groups&#39;</span><span class="p">:</span> <span class="s">&#39;example,random&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d2</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;PyConstant_Number&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;call_back&#39;</span><span class="p">:</span> <span class="n">Constant_Number</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;time_max&#39;</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;value_type&#39;</span><span class="p">:</span> <span class="s">&#39;uint&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="s">&#39;N&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;slope&#39;</span><span class="p">:</span> <span class="s">&#39;zero&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;</span><span class="si">%hu</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;Example module metric (constant number)&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">descriptors</span> <span class="o">=</span> <span class="p">[</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">descriptors</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">metric_cleanup</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Clean up the metric module.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="c">#This code is for debugging and unit testing</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;RandomMax&#39;</span><span class="p">:</span> <span class="s">&#39;500&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;ConstantValue&#39;</span><span class="p">:</span> <span class="s">&#39;322&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">metric_init</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">descriptors</span><span class="p">:</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="s">&#39;call_back&#39;</span><span class="p">](</span><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;value for </span><span class="si">%s</span><span class="s"> is </span><span class="si">%u</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span>  <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他还需要做些简单的配置，不过看下gmond.conf的配置文件基本上就都搞好了。这里就不啰嗦了，这两天感冒的厉害，需要好好休息。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920025573.do">Monitoring with Ganglia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia整合java]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-java/"/>
    <updated>2013-04-16T22:09:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-java</id>
    <content type="html"><![CDATA[<p>前段时间简单介绍了Ganglia的安装和配置，现在我们的Ganglia已经跑了起来，并且已经可以展示机器的负载，
网络，io等各种数据，但是光有机器的情况还是远远不够，我们还需要了解每个应用的运行情况。针对一些常见的应用如：Mysql，Memcached，Redis，Nginx等，Ganglia的github上有很多开源的模块，大家可以自己折腾，要是有时间，后面也会简单简介绍下。这里主要介绍下怎么用Ganglia来收集和展示Java的数据，包括JVM的运行数据和业务数据。</p>

<h4>获取JMX数据</h4>

<p>JVM的运行数据我们是从JMX获得的，其实业务数据也可以写进JMX里，所以如果你的Java应用开启了JMX的话，基本上各种数据都可以从JMX中获得了。获取JMX数据的包Ganglia的网站已经有了，叫<a href="https://github.com/ganglia/jmxetric">jmxetric</a>。要使用它，需要再jvm参数里加入如下的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>-javaagent:jmxetric-1.0.3.jar<span class="o">=</span><span class="nv">host</span><span class="o">=</span>xxx,port<span class="o">=</span>xxx,mode<span class="o">=</span>unicast,wireformat31x<span class="o">=</span><span class="nb">true</span>,config<span class="o">=</span>jmxetric.xml
</span></code></pre></td></tr></table></div></figure>


<p>host是接收数据gmond的host，port是gmond的端口，mode有multicast和unicast两种，由于网络原因，我们使用的是unicast（单播），wireformat31x这个不清楚，一直都是true来着。前面几项配置都可以写到jmxetric.xml里面，不过为了方便控制这些参数，放到了外面。jmxetric.xml里面写需要获取的JMX的数据项，jmxetric的站点上有各详细的示例，这个不不再占用空间了。</p>

<p>一些注意的地方:
1. jmxetric.jar还依赖与gmetric4j.jar和oncrpc.jar，所以如果是直接下载jar包的话，要把依赖的jar包也都下到，而且要和jmxetric.jar在一个目录下。我们的项目是用maven管理的，直接加如下的依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>info.ganglia.jmxetric<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jmxetric<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>记得开启JMX哦</li>
</ol>


<h4>直接发送数据</h4>

<p>如果觉得从JMX获取数据麻烦的话，或者你不想开启JMX，你也可以直接发送数据到gmond。这个也有了现成的包gmetric4j，其实jmxetric也是利用他来发送数据的。这个没啥好说的，就是利用包提供的api发送数据就好了。
写了一个工具类，对原生的api做了简单的封装。最近看了下yammer开源的metrics，很强大，有兴趣的可以看下它的源码。</p>

<div><script src='https://gist.github.com/5472141.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>参考资料</h3>

<ul>
<li><a href="https://github.com/ganglia/jmxetric">https://github.com/ganglia/jmxetric</a></li>
<li><a href="https://github.com/ganglia/gmetric4j">https://github.com/ganglia/gmetric4j</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia]]></title>
    <link href="http://ellios.github.com//blog/2013/03/12/ganglia/"/>
    <updated>2013-03-12T23:38:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/03/12/ganglia</id>
    <content type="html"><![CDATA[<p>最近忙的一个项目，终于上线了，忙了一个多月，但是心里仍然很没谱。为什么没谱，主要是因为目前的系统缺乏有效的监控，对于机器负载，jvm的运行情况，各接口的调用次数，接口的调用时间。于是痛下决心，利用系统刚上线，空余的一周搭建一套监控系统。</p>

<p>之前做运维的工作很少，对于各种监控系统更是缺乏有效的了解，了解到的一些常用监控系统有catti，zabbix和ganglia，考虑再三选择了ganglia。为什么选择ganglia呢，理由没那么充分，可能之前看过ganglia的一些资料，对他更为熟悉，对于他出身Berkley和支持python，这两点都比较满意，于是就选择它了。</p>

<p>选型之后就开始折腾了，相关的资料不多，很多的配置都是试着来，期间走了很多的弯路，本来预计两天搞定的事情，其实用了一周多。直接导致本周计划的持续集成环境的搭建没时间搞了。这里简单记录下安装过程。</p>

<h3>相关简介</h3>

<p><a href="http://ganglia.info/">Ganglia</a>是UC Berkley发起的一个开源项目，可以用来监控数以千记的服务器集群，具有很好的扩展性。Ganglia主要包括三个部分
1. Gmond，运行在每台目标机器节点上，用于获取节点的监控数据，gmond不仅能够收集本节点的数据，还能接收其他节点发来的数据，对数据做汇集后发送到gmetad，这样就可以保证整个监控系统的可扩展性；
2. Gemtad，将各gmond的数据收集到一起，用rrdtool将数据保存到硬盘上
3. Web Front， 将rrdtool生成的数据输出可视化的图片</p>

<p>简单介绍下rrdtool（Round Robin Database Tool）
rrdtool是一种环状结构的数据库，非常适合处理时间序列的数据，能够非常高效的绘制时间序列的图片。ganglia的数据存储和可视化都是通过rrdtool实现的。</p>

<h3>安装</h3>

<h4>Ubuntu安装</h4>

<p>Ubuntu下用apt-get会自动把相关的依赖都给安装上，执行下面的命令</p>

<pre><code>```sh
sudo apt-get install ganglia-monitor ganglia-webfrontend
```
</code></pre>

<h4>rh5编译安装</h4>

<ol>
<li>安装依赖的库</li>
</ol>


<p>先用yum把相关的依赖都安装上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum -y install apr-devel apr-util check-devel cairo-devel pango-devel <span class="se">\</span>
</span><span class='line'>libxml2-devel rpmbuild glib2-devel dbus-devel freetype-devel fontconfig-devel <span class="se">\</span>
</span><span class='line'>gcc-c++ expat-devel python-devel libXrender-devel libconfuse
</span></code></pre></td></tr></table></div></figure>


<p>虽然列出来好多，但是绝大多数都是一些常见的基础包，需要注意的就是expat和libconfuse</p>

<ol>
<li>编译安装rrdtool，执行下面的命令</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://oss.oetiker.ch/rrdtool/pub/rrdtool.tar.gz
</span><span class='line'>tar zxvf rrdtool*
</span><span class='line'><span class="nb">cd </span>rrdtool-*
</span><span class='line'>./configure --prefix<span class="o">=</span>/data/apps/rrdtool
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>编译安装ganglia</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">&quot;$CPPFLAGS -I/opt/apps/rrdtool&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;$LDFLAGS -L/opt/apps/rrdtool&quot;</span>
</span><span class='line'>tar –zxvf ganglia-3.1.2.tar.gz
</span><span class='line'><span class="nb">cd </span>ganglia-3.1.2.tar.gz
</span><span class='line'>./configure --prefix<span class="o">=</span>/data/apps/ganglia --with-gmetad
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>4.将编译好的ganglia发布到客户端
首先在目标机器上建立ssh信任，然后执行下面的脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">GANGLIA_BIN</span><span class="o">=</span>/data/apps/ganglia/bin
</span><span class='line'><span class="nv">GANGLIA_SBIN</span><span class="o">=</span>/data/apps/ganglia/sbin
</span><span class='line'><span class="nv">GANGLIA_LIB</span><span class="o">=</span>/data/apps/ganglia/lib64
</span><span class='line'><span class="nv">i</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p <span class="nv">$GANGLIA_BIN</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p <span class="nv">$GANGLIA_SBIN</span>
</span><span class='line'>scp <span class="nv">$GANGLIA_BIN</span>/gmetric <span class="nv">$i</span>:<span class="nv">$GANGLIA_BIN</span>
</span><span class='line'>scp <span class="k">${</span><span class="nv">GANGLIA_SBIN</span><span class="k">}</span>/gmond <span class="nv">$i</span>:<span class="k">${</span><span class="nv">GANGLIA_SBIN</span><span class="k">}</span>/gmond
</span><span class='line'>ssh <span class="nv">$i</span> ln -fs <span class="nv">$GANGLIA_SBIN</span>/gmond /usr/sbin/gmond
</span><span class='line'>scp -r <span class="nv">$GANGLIA_LIB</span> <span class="nv">$i</span>:<span class="nv">$GANGLIA_LIB</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p /etc/ganglia/
</span><span class='line'>scp gmond.conf <span class="nv">$i</span>:/etc/ganglia/gmond.conf
</span><span class='line'>scp /etc/init.d/gmond <span class="nv">$i</span>:/etc/init.d/
</span><span class='line'>scp /lib64/libexpat.so.0 <span class="nv">$i</span>:/lib64/
</span><span class='line'>scp /usr/lib64/libconfuse.so.0 <span class="nv">$i</span>:/usr/lib64/
</span><span class='line'>scp /usr/lib64/libapr-1.so.0 <span class="nv">$i</span>:/usr/lib64/
</span><span class='line'>ssh <span class="nv">$i</span> chkconfig --add gmond
</span><span class='line'>ssh <span class="nv">$i</span> chkconfig gmond on
</span><span class='line'>ssh <span class="nv">$i</span> service gmond start
</span></code></pre></td></tr></table></div></figure>


<p>5.搭建Http Server
ganglia的Web界面是用php写的，所以支持php的http server是必须的。这个没啥好说的，php和各种http Server集成的方法还是
挺多的，我用的最经典的Apache+php_module的方式。</p>

<h3>配置</h3>

<p>对应于组成ganglia的三种组件，ganglia的配置也需要对这三种组件分别做配置</p>

<ol>
<li>Web Front的配置
Web Front的配置文件是web项目下的conf.php文件，新版的web项目可能没有这个文件，自己建一个就好了，默认是先从conf.php加载不到，如果
没有的话，就从conf_default.php加载。可以通过这个文件对web项目做些简单的定制。下面是我的配置文件。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$conf[&#39;gmetad_root&#39;] = &quot;/data/appdata/ganglia&quot;;</span>
</span><span class='line'><span class="x">$conf[&#39;rrds&#39;] = &quot;${conf[&#39;gmetad_root&#39;]}/rrds&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Gmetad的配置
Gmetad的配置文件默认是/etc/ganglia/gmetad.conf，编译的时候可以自己指定配置文件的位置在configure加&#8211;sysconfdir=xx.这个文件里面
最重要的配置项是data_source，下面是我的一个简要的配置</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">data_source &quot;monitor&quot; xx.xx.xx.xx:8649</span>
</span><span class='line'><span class="x">data_source &quot;test&quot; xx.xx.xx.xx:8649</span>
</span><span class='line'><span class="x">rrd_rootdir &quot;/data/appdata/ganglia/rrds&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Gmond的配置
Gmond是真正干活的，由于没弄明白它的配置，期间犯了好多低级错误。Gmond的默认数据收集的方式有组播和单播两种，默认是组播，组播的好处是配置非常简单，
但是对网络的可适应要差些。我们的机器由于有跨机房的问题，所以用的是单播的方式。</li>
</ol>


<p>生成默认的gmond配置文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gmond --default_config &gt; /etc/ganglia/gmond.conf
</span></code></pre></td></tr></table></div></figure>


<p>我的配置文件的示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">globals {</span>
</span><span class='line'><span class="x">  daemonize = yes</span>
</span><span class='line'><span class="x">  setuid = yes</span>
</span><span class='line'><span class="x">  user = nobody</span>
</span><span class='line'><span class="x">  debug_level = 0</span>
</span><span class='line'><span class="x">  max_udp_msg_len = 1472</span>
</span><span class='line'><span class="x">  mute = no</span>
</span><span class='line'><span class="x">  deaf = no</span>
</span><span class='line'><span class="x">  allow_extra_data = yes</span>
</span><span class='line'><span class="x">  host_dmax = 86400 /*secs. Expires (removes from web interface) hosts in 1 day */</span>
</span><span class='line'><span class="x">  host_tmax = 20 /*secs */</span>
</span><span class='line'><span class="x">  cleanup_threshold = 300 /*secs */</span>
</span><span class='line'><span class="x">  gexec = no</span>
</span><span class='line'><span class="x">  send_metadata_interval = 120 /*secs */</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">cluster {</span>
</span><span class='line'><span class="x">  name = &quot;cluster&quot; /*这个字段是集群的名称，对应gmetad的data_source的名称 */</span>
</span><span class='line'><span class="x">  owner = &quot;&quot;</span>
</span><span class='line'><span class="x">  latlong = &quot;unspecified&quot;</span>
</span><span class='line'><span class="x">  url = &quot;&quot;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">host {</span>
</span><span class='line'><span class="x">  location = &quot;unspecified&quot;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">udp_send_channel {</span>
</span><span class='line'><span class="x">  host = xx.xx.xx.xx</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">  ttl = 1</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">udp_recv_channel {</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">  bind = yy.yy.yy.yy</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">tcp_accept_channel {</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>遇到的一些问题</h3>

<ol>
<li>gmond会把一些错误日志打到系统日志里面，如果有问题可以关注下系统日志</li>
<li>gmond -d 10可以打出debug信息</li>
</ol>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.imxylz.info/wiki/Ganglia/Ganglia">http://www.imxylz.info/wiki/Ganglia/Ganglia</a></li>
<li><a href="http://www.howtocn.org/ganglia_how_to">http://www.howtocn.org/ganglia_how_to</a></li>
<li><a href="http://sourceforge.net/apps/trac/ganglia/wiki">http://sourceforge.net/apps/trac/ganglia/wiki</a></li>
<li><a href="">http://ganglia.info/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vrs hedwig入门]]></title>
    <link href="http://ellios.github.com//blog/2012/11/14/vrs-hedwig-tutorial/"/>
    <updated>2012-11-14T21:13:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/11/14/vrs-hedwig-tutorial</id>
    <content type="html"><![CDATA[<p>hedwig（Harry Potter&#8217;s owl. A messager.）是一个分布式服务的框架，用户使用它可以很方便的开发分布式服务，并使用这些服务。它主要有以下功能：</p>

<ul>
<li>统一的服务注册中心</li>
<li>统一的服务管理平台</li>
<li>统一的服务监控平台</li>
<li>使用protocol buffer或者thrift作为消息格式，支持多种语言调用。</li>
<li>服务可动态扩展</li>
<li>负载均衡</li>
<li>服务的容错容灾</li>
</ul>


<p>下面对hedwig的使用做一个简单的入门介绍.</p>

<p>hedwig支持[protocol buffer]和<a href="http://thrift.apache.org/">thrift</a>作为消息格式，两种格式的服务开发和调用略有不同，下面分别讲述。</p>

<h3>Protocol bufffe服务</h3>

<h4>服务Provider</h4>

<ol>
<li>定义消息格式</li>
</ol>


<figure class='code'><figcaption><span>example.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">pb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span> <span class="n">java_package</span> <span class="o">=</span> <span class="s">&quot;com.qiyi.vrs.hedwig.examples.pb&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">option</span> <span class="n">java_outer_classname</span> <span class="o">=</span> <span class="s">&quot;Calculator&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">CalcRequest</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">Operation</span> <span class="n">op</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>      <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">CalcResponse</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>使用protoc生成代码</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --java_out<span class="o">=</span>../java example.proto
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>定义服务接口</li>
</ol>


<figure class='code'><figcaption><span>CalculatorService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CalculatorService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>实现服务</li>
</ol>


<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorServiceImpl</span> <span class="kd">implements</span> <span class="n">CalculatorService</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getNum1</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getNum2</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">Operation</span> <span class="n">op</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getOp</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;calculate(, {&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">ADD:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SUBTRACT:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">-</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">MULTIPLY:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">DIVIDE:</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;num2 is zero for divide operation&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">/</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;unknown operation&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setResult</span><span class="o">(</span><span class="n">val</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>启动服务，服务启动时会自动在服务中心注册</li>
</ol>


<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PbCalServer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">HedwigServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HedwigServer</span><span class="o">.</span><span class="na">getServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">registerService</span><span class="o">(</span><span class="n">ServiceConfigFactory</span><span class="o">.</span><span class="na">createServiceConfig</span><span class="o">(</span><span class="n">CalculatorService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">CalculatorServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>服务调用</h4>

<p>调用服务前你需要获取服务的接口类和接口名称，然后就可以调用服务了。</p>

<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PbCalClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">CalculatorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ServiceHelper</span><span class="o">.</span><span class="na">getPbService</span><span class="o">(</span><span class="n">CalculatorService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setNum1</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">setNum2</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">setOp</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">Operation</span><span class="o">.</span><span class="na">ADD</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thrift服务</h3>

<h4>Thrift服务Provider</h4>

<p>一. 定义服务接口</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* example.thrift</span>
</span><span class='line'><span class="cm">* show how to use thrift rpc</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">thrift</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">py</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">thrift</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">exception</span> <span class="n">InvalidOperation</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">:</span> <span class="n">i32</span> <span class="n">what</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">:</span> <span class="n">string</span> <span class="n">why</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">Calculator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">i32</span> <span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">i32</span> <span class="n">num1</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="n">i32</span> <span class="n">num2</span><span class="p">,</span> <span class="mi">3</span><span class="o">:</span><span class="n">Operation</span> <span class="n">op</span><span class="p">)</span> <span class="n">throws</span> <span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">InvalidOperation</span> <span class="n">ouch</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>二. 生成代码，thrift提供了代码生成工具，执行下面的命令生成java代码</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">thrift</span> <span class="o">-</span><span class="n">gen</span> <span class="n">java</span> <span class="o">-</span><span class="n">out</span> <span class="p">..</span><span class="o">/</span><span class="n">java</span> <span class="n">exmaple</span><span class="p">.</span><span class="n">thrift</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>实现服务</li>
</ol>


<p>thrift的代码生成工具会自动生成接口类，直接实现接口就可以了</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">CalculatorServiceImpl</span> <span class="n">implements</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="n">Override</span>
</span><span class='line'>    <span class="n">public</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">,</span> <span class="n">Operation</span> <span class="n">op</span><span class="p">)</span> <span class="n">throws</span> <span class="n">InvalidOperation</span><span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;calculate({&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ADD</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">SUBTRACT</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">-</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MULTIPLY</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">DIVIDE</span>:
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="n">new</span> <span class="n">InvalidOperation</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="p">.</span><span class="n">what</span> <span class="o">=</span> <span class="n">op</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="p">.</span><span class="n">why</span> <span class="o">=</span> <span class="s">&quot;Cannot divide by 0&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">throw</span> <span class="n">io</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">/</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="nl">default:</span>
</span><span class='line'>                <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="n">new</span> <span class="n">InvalidOperation</span><span class="p">();</span>
</span><span class='line'>                <span class="n">io</span><span class="p">.</span><span class="n">what</span> <span class="o">=</span> <span class="n">op</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>
</span><span class='line'>                <span class="n">io</span><span class="p">.</span><span class="n">why</span> <span class="o">=</span> <span class="s">&quot;Unknown operation&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="n">throw</span> <span class="n">io</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>启动服务</li>
</ol>


<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">ThriftCalServer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">...</span> <span class="n">args</span><span class="p">){</span>
</span><span class='line'>        <span class="n">HedwigServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HedwigServer</span><span class="p">.</span><span class="n">getServer</span><span class="p">();</span>
</span><span class='line'>        <span class="n">server</span><span class="p">.</span><span class="n">registerService</span><span class="p">(</span><span class="n">ServiceConfigFactory</span><span class="p">.</span><span class="n">createServiceConfig</span><span class="p">(</span><span class="s">&quot;ThriftCalculatorService&quot;</span><span class="p">,</span> <span class="mi">8886</span><span class="p">,</span>
</span><span class='line'>                <span class="n">ServiceConfig</span><span class="p">.</span><span class="n">ServiceSchema</span><span class="p">.</span><span class="n">TCP</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">ServiceConfig</span><span class="p">.</span><span class="n">ServiceType</span><span class="p">.</span><span class="n">THRIFT</span><span class="p">,</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>                <span class="n">CalculatorServiceImpl</span><span class="p">.</span><span class="n">class</span><span class="p">));</span>
</span><span class='line'>        <span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>thrift服务调用</h4>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">ThriftCalClient</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">...</span> <span class="n">args</span><span class="p">)</span> <span class="n">throws</span> <span class="n">TException</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ServiceHelper</span><span class="p">.</span><span class="n">getThriftService</span><span class="p">(</span><span class="s">&quot;ThriftCalculatorService&quot;</span><span class="p">,</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">.</span><span class="n">class</span><span class="p">);</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">service</span><span class="p">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="n">Operation</span><span class="p">.</span><span class="n">ADD</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<ol>
<li>服务端支持spring,需要在配置文件hedwig.properties中填加如下内容</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hedwig.spring.enable<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>hedwig.spring.config<span class="o">=</span>spring/vrs_all.xml
</span></code></pre></td></tr></table></div></figure>


<p>hedwig.spring.config可不填，默认会从META-INf/spring/下读取所有的配置文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zookeeper入门]]></title>
    <link href="http://ellios.github.com//blog/2012/11/11/zookeeper-tutorial/"/>
    <updated>2012-11-11T13:39:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/11/11/zookeeper-tutorial</id>
    <content type="html"><![CDATA[<h3>What is Zookeeper</h3>

<p>ZooKeeper is a high-performance <strong>coordination</strong> service for <strong>distributed</strong> applications. It exposes common services - such as <strong>naming</strong>, <strong>configuration management</strong>, <strong>synchronization</strong>, and <strong>group services</strong> - in a simple interface so you don&#8217;t have to write them from scratch. You can use it off-the-shelf to implement <strong>consensus</strong>, <strong>group management</strong>, <strong>leader election</strong>, and <strong>presence protocols</strong>.</p>

<p>Zookeeper提供了如下的一致性保证：</p>

<ol>
<li>顺序一致性。客户端的更新顺序与它们被发送的顺序相一致。</li>
<li>原子性。更新操作要么成功要么失败，不会更新半拉。</li>
<li>单系统镜像。无论客户端连接到哪一个服务器，客户端将看到相同的 ZooKeeper 视图。</li>
<li>可靠性。一旦一个更新操作被应用，那么在客户端再次更新它之前，它的值将不会改变。</li>
<li>实时性。在特定的一段时间内，客户端能够得到数据变化的通知</li>
</ol>


<h3>Name Space</h3>

<p><img src="http://zookeeper.apache.org/doc/r3.4.4/images/zknamespace.jpg" alt="ZooKeeper's Hierarchical Namespace" /></p>

<p>如图所示，zookeeper的命令空间是一个树状结构，类似于文件系统。树中的每个节点对应一个znode。</p>

<h4>Znode</h4>

<ol>
<li>znode通过路径来唯一标识</li>
<li>znode有分为<strong>PERSISTENT</strong>和<strong>EPHEMERAL</strong>(EPHEMERAL的生命周期依赖于client session，对应session close/expire后其znode也会消失)</li>
<li>znode的数据读写是原子的</li>
<li>znode的数据数据结构

<ul>
<li>czxid : The zxid of the change that caused this znode to be created.</li>
<li>mzxid : The zxid of the change that last modified this znode.</li>
<li>ctime : The time in milliseconds from epoch when this znode was created.</li>
<li>mtime : The time in milliseconds from epoch when this znode was last modified.</li>
<li>version : The number of changes to the data of this znode.</li>
<li>cversion : The number of changes to the children of this znode.</li>
<li>aversion : The number of changes to the ACL of this znode.</li>
<li>ephemeralOwner : The session id of the owner of this znode if the znode is an ephemeral node. If it is not an ephemeral node, it will be zero.</li>
<li>dataLength : The length of the data field of this znode.</li>
<li>numChildren : The number of children of this znode.</li>
</ul>
</li>
<li>zonde的数据大小是有限制的，默认最大是1M，可以通过修改环境变量jute.maxbuffer来设置</li>
</ol>


<h3>Zookeeper Cluster</h3>

<p><img src="http://zookeeper.apache.org/doc/r3.4.4/images/zkservice.jpg" alt="Zookeeper Cluster" /></p>

<p>Zookeeper中的每个节点都在内存中有个一份所有数据的副本。</p>

<h4>角色</h4>

<p>Zookeeper集群中，每个节点担任下面的一种角色。</p>

<ul>
<li>leader：集群的管理者（数据同步，数据更新提议），通过paxos算法选举出来的</li>
<li>follower：参与投票，在leader出问题时，可以被选举为follower</li>
<li>observer：定时从leader同步数据，提高系统的读性能

<h4>Paxos</h4>

<p><a href="http://en.wikipedia.org/wiki/Paxos_algorithm">Paxos</a>是一种分布式一致性算法，是zookeeper保证数据一致性的基础。网上关于paxos的内容还挺多的，有兴趣的自行找吧。</p></li>
</ul>


<h3>Zookeeoer的应用</h3>

<ul>
<li>Leader Election</li>
<li>Group Membership</li>
<li>Configuration Management</li>
<li>Cluster Management</li>
<li>分布式锁</li>
<li>分布式队列</li>
</ul>


<h3>实践</h3>

<p>Zookeeper自身提供的接口比较麻烦，网上有很多开源的zookeeper client的封装实现，目前用了netflix出的curator，这里<a href="https://github.com/Netflix/curator/tree/master/curator-examples">examples</a>有一些例子，有兴趣的可以看下。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/2318">http://rdc.taobao.com/team/jm/archives/2318</a></li>
<li><a href="http://zookeeper.apache.org/doc/r3.4.4/zookeeperAdmin.html">http://zookeeper.apache.org/doc/r3.4.4/zookeeperAdmin.html</a></li>
<li><a href="http://www.searchtb.com/2011/01/zookeeper-research.html">http://www.searchtb.com/2011/01/zookeeper-research.html</a></li>
<li><a href="http://en.wikipedia.org/wiki/Paxos_algorithm">http://en.wikipedia.org/wiki/Paxos_algorithm</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/448">http://rdc.taobao.com/team/jm/archives/448</a></li>
<li><a href="http://rdc.taobao.com/blog/cs/?p=162">http://rdc.taobao.com/blog/cs/?p=162</a></li>
<li><a href="http://agapple.iteye.com/blog/1292473">http://agapple.iteye.com/blog/1292473</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/665">http://rdc.taobao.com/team/jm/archives/665</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/947">http://rdc.taobao.com/team/jm/archives/947</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1070">http://rdc.taobao.com/team/jm/archives/1070</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1232">http://rdc.taobao.com/team/jm/archives/1232</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1241">http://rdc.taobao.com/team/jm/archives/1241</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1384">http://rdc.taobao.com/team/jm/archives/1384</a></li>
<li><a href="http://www.spnguru.com/2010/08/zookeeper%E5%85%A8%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94paxos%E7%9A%84%E7%81%B5%E9%AD%82/">http://www.spnguru.com/2010/08/zookeeper%E5%85%A8%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94paxos%E7%9A%84%E7%81%B5%E9%AD%82/</a></li>
<li><a href="http://blog.csdn.net/shenlan211314/article/details/6187040">http://blog.csdn.net/shenlan211314/article/details/6187040</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thrift入门]]></title>
    <link href="http://ellios.github.com//blog/2012/10/24/thrift-guide/"/>
    <updated>2012-10-24T21:59:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/24/thrift-guide</id>
    <content type="html"><![CDATA[<p>前几天介绍了下Protocol Buffer，这次研究下和PB比较类似的Thrift。这两者都定义了代码独立的数据结构描述语法，并且提供了工具将定义的数据结构转化为相应的代码（Java，C++，Python之类的）。但是从使用上来说，Thrift提供的功能要更丰富一些，简单列下对二者区别的认识</p>

<ul>
<li>Thrfit从语法上来说，更接近C的语法，对程序员的友好性要更好些</li>
<li>Thrift对rpc的支持比较好，接口的描述语法更类似与通常的接口声明。PB的接口只支持单一的输入参数，如果有多个参数，需要自己定义参数的数据结构，使用起来很别扭。不仅仅是语法上，Thrift对rpc是提供了完整的支持的，用Thrift可以很方便的写出rpc的Server和Client端，PB则要自己写网络层。</li>
<li>PB对于容器类的数据结构只提供了对list的直接支持，而Thrift还提供了set和map类型，符合通常程序员的使用习惯</li>
<li>Thrift直接支持的语言比较多，PB只支持Java，C++，Python，不过PB有很多第三方实现的对其他语言的支持</li>
<li>PB的文档更好些，从发布的节奏上来看PB要更活跃一些。学习Thrift一定要看看源码</li>
<li>PB的性能要更好些，不过Thrift也不会太差，一般的生产环境下，这点性能提升可以忽略了</li>
</ul>


<h3>使用</h3>

<p>Thrift在使用前同样需要安装，这里给个安装的<a href="http://thrift.apache.org/docs/install/">传送门</a>。Thrift的源码里有些tutorial的代码，里面有各种语言的使用示例，初学thrift的话，把tutorial里的代码看明白，基本就能入门了。</p>

<h4>Types</h4>

<p>先来打点基础，看下thrift支持哪些数据类型：</p>

<ul>
<li>bool        Boolean, one byte</li>
<li>byte        Signed byte</li>
<li>i16         Signed 16-bit integer</li>
<li>i32         Signed 32-bit integer</li>
<li>i64         Signed 64-bit integer</li>
<li>double      64-bit floating point value</li>
<li>string      String</li>
<li>binary      Blob (byte array)</li>
<li>map&lt;t1,t2>  Map from one type to another</li>
<li>list<t1>    Ordered list of one type</li>
<li>set<t1>     Set of unique elements of one type</li>
</ul>


<p>相对与pb，thrift多了map,list,set这些容器类型，但是基本的数值类型少了一些，不过我们需要用到的也都有了。</p>

<h4>示例</h4>

<p>基础的内容就介绍这么多了，下面直接上例子，估计看了例子大家对thrift的语法也了解差不多了。</p>

<figure class='code'><figcaption><span>demo.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">/*</span>
</span><span class='line'><span class="o">*</span> <span class="n">demo</span><span class="o">.</span><span class="n">thrift</span>
</span><span class='line'><span class="o">*</span> <span class="n">thrift</span> <span class="n">usage</span> <span class="n">demo</span>
</span><span class='line'><span class="o">*/</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">cpp</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">py</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'>
</span><span class='line'><span class="n">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">struct</span> <span class="n">Work</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">:</span> <span class="n">i32</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">:</span> <span class="n">i32</span> <span class="n">num2</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">3</span><span class="p">:</span> <span class="n">Operation</span> <span class="n">op</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">4</span><span class="p">:</span> <span class="n">optional</span> <span class="n">string</span> <span class="n">comment</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">exception</span> <span class="n">InvalidOperation</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">:</span> <span class="n">i32</span> <span class="n">what</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">:</span> <span class="n">string</span> <span class="n">why</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">Calculator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">i32</span> <span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">i32</span> <span class="n">logid</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="n">Work</span> <span class="n">w</span><span class="p">)</span> <span class="n">throws</span> <span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">InvalidOperation</span> <span class="n">ouch</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>java的例子</h4>

<p>执行下面的命令，会生成相应的java代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> thrift --gen java --out . demo.thrift
</span></code></pre></td></tr></table></div></figure>


<h5>Java Server</h5>

<p>首先实现接口</p>

<figure class='code'><figcaption><span>CaloculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CaloculatorServiceImpl</span>  <span class="kd">implements</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">logid</span><span class="o">,</span> <span class="n">Work</span> <span class="n">work</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidOperation</span><span class="o">,</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;calculate(&quot;</span> <span class="o">+</span> <span class="n">logid</span> <span class="o">+</span> <span class="s">&quot;, {&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">ADD:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SUBTRACT:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">-</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">MULTIPLY:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">*</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">DIVIDE:</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidOperation</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="o">.</span><span class="na">why</span> <span class="o">=</span> <span class="s">&quot;Cannot divide by 0&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="n">io</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">/</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidOperation</span><span class="o">();</span>
</span><span class='line'>                <span class="n">io</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="n">io</span><span class="o">.</span><span class="na">why</span> <span class="o">=</span> <span class="s">&quot;Unknown operation&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">io</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面实现一个Server，让人们可以调用服务</p>

<figure class='code'><figcaption><span>DemoServer.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoServer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TTransportException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="n">calculatorService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CaloculatorServiceImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Processor</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Processor</span><span class="o">(</span><span class="n">calculatorService</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TServerTransport</span> <span class="n">serverTransport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TServerSocket</span><span class="o">(</span><span class="mi">8000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">(</span><span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">.</span><span class="na">Args</span><span class="o">(</span><span class="n">serverTransport</span><span class="o">).</span><span class="na">processor</span><span class="o">(</span><span class="n">processor</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting the simple server...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">serve</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java Client</h5>

<p>接下来实现一个客户端，调用服务。</p>

<figure class='code'><figcaption><span>DemoClient.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TTransport</span> <span class="n">transport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TSocket</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">,</span> <span class="mi">8000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">transport</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>        <span class="n">TProtocol</span> <span class="n">protocol</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TBinaryProtocol</span><span class="o">(</span><span class="n">transport</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Client</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Work</span> <span class="n">work</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Work</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="na">DIVIDE</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">quotient</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">work</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Whoa we can divide by 0&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidOperation</span> <span class="n">io</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid operation: &quot;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">why</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="na">SUBTRACT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">work</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;15-10=&quot;</span> <span class="o">+</span> <span class="n">diff</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidOperation</span> <span class="n">io</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid operation: &quot;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">why</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">transport</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>python示例</h4>

<p>由于前面已经实现了一个Java的Server，这里就只实现一个client了。</p>

<figure class='code'><figcaption><span>demo_client.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">me.ellios.demo</span> <span class="kn">import</span> <span class="n">Calculator</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">me.ellios.demo.ttypes</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift</span> <span class="kn">import</span> <span class="n">Thrift</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TSocket</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TTransport</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.protocol</span> <span class="kn">import</span> <span class="n">TBinaryProtocol</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>  <span class="c"># Make socket</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=</span> <span class="n">TSocket</span><span class="o">.</span><span class="n">TSocket</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Buffering is critical. Raw sockets are very slow</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=</span> <span class="n">TTransport</span><span class="o">.</span><span class="n">TBufferedTransport</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Wrap in a protocol</span>
</span><span class='line'>  <span class="n">protocol</span> <span class="o">=</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">TBinaryProtocol</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Create a client to use the protocol encoder</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">Calculator</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">protocol</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Connect!</span>
</span><span class='line'>  <span class="n">transport</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>  <span class="n">work</span> <span class="o">=</span> <span class="n">Work</span><span class="p">()</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="n">DIVIDE</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num2</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">quotient</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">work</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Whoa? You know how to divide by zero?&#39;</span>
</span><span class='line'>  <span class="k">except</span> <span class="n">InvalidOperation</span><span class="p">,</span> <span class="n">io</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;InvalidOperation: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">io</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="n">SUBTRACT</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num1</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num2</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">diff</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">work</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;15-10=</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Close!</span>
</span><span class='line'>  <span class="n">transport</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="n">Thrift</span><span class="o">.</span><span class="n">TException</span><span class="p">,</span> <span class="n">tx</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">tx</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考资料</h3>

<ul>
<li><a href="http://diwakergupta.github.com/thrift-missing-guide/">http://diwakergupta.github.com/thrift-missing-guide/</a></li>
<li><a href="http://wiki.apache.org/thrift/FrontPage">http://wiki.apache.org/thrift/FrontPage</a></li>
<li><a href="http://thrift.apache.org">http://thrift.apache.org</a></li>
<li><a href="http://jnb.ociweb.com/jnb/jnbJun2009.html">http://jnb.ociweb.com/jnb/jnbJun2009.html</a></li>
<li><a href="http://stackoverflow.com/questions/69316/biggest-differences-of-thrift-vs-protocol-buffers">http://stackoverflow.com/questions/69316/biggest-differences-of-thrift-vs-protocol-buffers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[艰难的reviewboard折腾]]></title>
    <link href="http://ellios.github.com//blog/2012/10/24/reviewboard/"/>
    <updated>2012-10-24T16:54:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/24/reviewboard</id>
    <content type="html"><![CDATA[<p>折腾了半天的<a href="http://www.reviewboard.org/">Review Board</a>，终于能提交请求了。因为期间的折腾过程特别曲折，所以记录一下。</p>

<p>因为是全公司要推广CodeReview，所以团队进行了一次简单培训，简单说了下Review Board的安装和使用，不过是基于windows和eclipse的，用的是一个eclipse的插件<a href="http://code.taobao.org/p/tao-reviewboard/wiki/index/">tao-reviewboard</a>，安装和配置都比较简单。因为移到linux和idea的开发环境已经好久了，所以我只能自己折腾了。</p>

<p>google了下，发现有基于idea的reviewboard插件，装上试了下，跟tao-reviewboard比起来，可以说是非常简陋，而且提交review请求的时候，报了一堆的错误。以为是自己的配置有问题，于是看着Review Board的文档，把配置文件~/.reviewboardrc重新检查了下，文件的内容如下</p>

<figure class='code'><figcaption><span>.reviewboardrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">REVIEWBOARD_URL</span> <span class="o">=</span> <span class="s2">&quot;http://reviewboard.xxx.com/&quot;</span>
</span><span class='line'><span class="nv">USERNAME</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">PASSWORD</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">HTTP_USERNAME</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">HTTP_PASSWORD</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完之后，继续报错，报的是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ProtocolException</span><span class="o">:</span> <span class="n">Server</span> <span class="n">redirected</span> <span class="n">too</span> <span class="n">many</span>  <span class="n">times</span>
</span></code></pre></td></tr></table></div></figure>


<p>google无结果，简单看了源码，还得了解idea的插件开发的一些知识，暂时没功夫，于是放弃。</p>

<p>试着装了下eclipse，发现tao-reviewboard是依赖于subclipse的，这个东西以前就装过，没有成功，这回试了下，果然还是不成功。同事说需要编译相应版本的svn客户端，觉得单独为个CodeReview再把eclipse折腾半天，不值得，于是放弃。</p>

<p>又去啃Review Board的文档了，Review Board提供了一个命令行的工具post-review，这个工具是python写的，看到是python写的就很有亲切感。安装很简单，执行下面的命令（之前已经有了python的环境，没有的可能还得提前装python和easy_install）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>easy_install -U RBTools
</span></code></pre></td></tr></table></div></figure>


<p>提交review请求的命令也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>post-review -p --target-groups<span class="o">=</span>xxx --target-people<span class="o">=</span>xxx --summary<span class="o">=</span>xxx --description<span class="o">=</span>xxx files
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的命令，报了206的错误。提示</p>

<blockquote><p>The repository path specified is not in the list of known repositories</p></blockquote>


<p>于是，加上-d参数，打印debug信息，觉得可能repository没加到Review Board Server里面，但是其他人都可以提交review，于是试着进到代码目录，在代码当前目录提交review请求，没想到竟然pass了这个问题，不过马上又报了一个207的错误。提示</p>

<blockquote><p>The repository path specified is not in the list of known repositories</p></blockquote>


<p>这个问题，试了好多办法都不行，于是只能调试源码，下了源码，一路输出debug信息，怀疑是diff文件的问题。看了下其他同事提交的diff文件，他们的diff文件里开头，代码文件的路径是相对路径，而我生成的竟然是绝对路径，而造成这一问题的原因就是svn.py下面这一句，把这句注释掉，替换掉RBTools-xxx.egg这个文件里面的相应文件</p>

<figure class='code'><figcaption><span>svn.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">diff</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">convert_to_absolute_paths</span><span class="p">(</span><span class="n">diff</span><span class="p">,</span> <span class="n">repository_info</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>试了下，终于OK了。post-review的那些参数太繁琐而且又长，以后有时间写个程序自己定制下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protocol Buffer入门]]></title>
    <link href="http://ellios.github.com//blog/2012/10/19/pb-tutorial/"/>
    <updated>2012-10-19T16:52:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/19/pb-tutorial</id>
    <content type="html"><![CDATA[<h2>是啥</h2>

<blockquote><p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the &#8220;old&#8221; format.</p><footer><strong>Google, Developer Guide,</strong> <cite><a href='https://developers.google.com/protocol-buffers/docs/overview'>developers.google.com/docs/&hellip;</a></cite></footer></blockquote>


<p>上面是Google官方文档对Protocol Buffer(简称PB)的定义，简单翻译下。</p>

<ul>
<li>序列化结构数据的自动化机制，类似XML，但是更小，更快，更简单</li>
<li>你只需定义你的数据结构，就可以用PB生成的源码去操作结构数据</li>
<li>支持多种语言</li>
<li>数据结构向后兼容</li>
</ul>


<h2>性能</h2>

<p>PB的性能，数据大小口碑一直不错，好多公司也都在用。这里有些人们做的<a href="http://code.google.com/p/thrift-protobuf-compare/wiki/BenchmarkingV2">Benchmark</a>数据。相对与未压缩的xml或者json来说是有不小的优势的，官方文档的说法是比xml要小3-10倍，快20-100倍。</p>

<h2>使用</h2>

<p>在使用PB之前要先定义你的数据结构，PB有一套数据结构定义的语法，你需要使用这套语法来定义你的结构。定义结构的代码一般会写到一个以.proto为后缀的文件中（文件后缀好像没有强制）</p>

<h3>语法</h3>

<h4>Message</h4>

<p>Message类似于Java中的对象，C中的struct，是PB中数据封装的基本单元，一般我们在PB中定义的数据结构就是一个个的Message了。</p>

<figure class='code'><figcaption><span>message.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">message</span> <span class="n">SearchRequest</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">query</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">int32</span> <span class="n">page_number</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">int32</span> <span class="n">result_per_page</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码就定义了一个message</p>

<ul>
<li>message由field组成，类似对象中的成员变量</li>
<li>要定义field的类型，类型包括scalar（待会儿说）， enumeration，以及message（支持嵌套哦）</li>
<li>要定义field的规则，规则有required（值不能为空）,optional（值可以为空），repeated（重复，用来声明列表）</li>
<li>每个field要分配Tag，tag就是每行最后的那写数字，占位符的意思。数据编码后用tag来对应每个field。tag从1开始，而且是动态编码的，1-16占一个字节，16-2047两个字节，最大是2<sup>29</sup> - 1</li>
</ul>


<h4>Scalar</h4>

<p>下图列出了PB所支持的Scalar的类型</p>

<p><img src="http://ellios.github.com//images/proto-scalar.png" alt="&quot;PB Scalar&quot;" /></p>

<h4>enum</h4>

<p>PB支持枚举类型，对应Java或者C中的枚举类型,下面是一个枚举的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="n">enum</span> <span class="n">Colour</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BLACK</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BLUE</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<p>使用之前需要先安装protoc，protoc用于生成对应语言的代码。除了protoc，还需要编译对应语言的库，并且添加到你的依赖路径中。<a href="http://ellios-note.readthedocs.org/en/latest/ice/protobuf.html?t">安装wiki</a></p>

<h4>数据结构</h4>

<p>首先用pb的语法定义数据结构。</p>

<figure class='code'><figcaption><span>tutorial.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">package</span> <span class="n">me</span><span class="o">.</span><span class="n">ellios</span><span class="o">.</span><span class="n">tutorial</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span> <span class="n">java_package</span> <span class="o">=</span> <span class="s">&quot;me.ellios.tutorial&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">option</span> <span class="n">java_outer_classname</span> <span class="o">=</span> <span class="s">&quot;AddressBookProtos&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">int32</span> <span class="nb">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">string</span> <span class="n">email</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">PhoneNumber</span> <span class="n">phone</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">enum</span> <span class="n">PhoneType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MOBILE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">HOME</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WORK</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message</span> <span class="n">PhoneNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">string</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">PhoneType</span> <span class="nb">type</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="n">default</span> <span class="o">=</span> <span class="n">HOME</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">AddressBook</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>package</em>：声明生成的代码所在的包，貌似是对应cpp的命名空间</li>
<li><em>option java_package</em>：针对java，声明java代码的包</li>
<li><em>option java_outer_classname</em>：针对java，声明java代码的类</li>
</ul>


<h4>java的例子</h4>

<p>执行下面的命令，会生成AddressBookProtos.java文件，将它拷到你的工作目录中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --java_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是一段简单的示例代码，演示怎么创建对象，以及对象的序列化和反序列化。</p>

<figure class='code'><figcaption><span>AddressBookExample.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">ellios</span><span class="o">.</span><span class="na">tutorial</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.ellios.tutorial.AddressBookProtos.Person</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.ellios.tutorial.AddressBookProtos.AddressBook</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBookExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//要通过builder来构建对象，</span>
</span><span class='line'>        <span class="n">AddressBook</span><span class="o">.</span><span class="na">Builder</span> <span class="n">addressBuiler</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">Person</span><span class="o">.</span><span class="na">Builder</span> <span class="n">personBuilder</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;ellios&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span> <span class="c1">//设置name，不能为空</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">//设置id，也不能为空</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> <span class="c1">//email可以为空</span>
</span><span class='line'>            <span class="c1">//创建phone</span>
</span><span class='line'>            <span class="n">Person</span><span class="o">.</span><span class="na">PhoneNumber</span><span class="o">.</span><span class="na">Builder</span> <span class="n">phoneBuilder</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">PhoneNumber</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="n">phoneBuilder</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="s">&quot;132222222222&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">phoneBuilder</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">PhoneType</span><span class="o">.</span><span class="na">values</span><span class="o">()[</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">3</span><span class="o">)]);</span>
</span><span class='line'>            <span class="c1">//将phone添加到person中,              .</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">addPhone</span><span class="o">(</span><span class="n">phoneBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">//将person添加到地址簿的列表中</span>
</span><span class='line'>            <span class="n">addressBuiler</span><span class="o">.</span><span class="na">addPerson</span><span class="o">(</span><span class="n">personBuilder</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">AddressBook</span> <span class="n">addressBook</span> <span class="o">=</span> <span class="n">addressBuiler</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook : &quot;</span>  <span class="o">+</span> <span class="n">addressBook</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">serializeBytes</span> <span class="o">=</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AddressBook</span> <span class="n">addressBook2</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">parseFrom</span><span class="o">(</span><span class="n">serializeBytes</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook2 equal to addressBook. result is &quot;</span> <span class="o">+</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">addressBook2</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">addressBook</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;addressBook&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AddressBook</span><span class="o">.</span><span class="na">Builder</span> <span class="n">addressBuilder3</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">addressBuilder3</span><span class="o">.</span><span class="na">mergeFrom</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;addressBook&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook3 equal to addressBook. result is &quot;</span> <span class="o">+</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">addressBuilder3</span><span class="o">.</span><span class="na">build</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>python示例</h4>

<p>执行下面的命令，生成tutorial_pb2.py文件,将它拷到工作目录中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --python_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是简单的示例代码</p>

<figure class='code'><figcaption><span>address_book_example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! /usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tutorial_pb2</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_book</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">AddressBook</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#39;ellios</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="n">phone</span><span class="o">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'>    <span class="n">phone_number</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="s">&quot;13233333333&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">MOBILE</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">HOME</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">WORK</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;address_book : &#39;</span><span class="p">,</span> <span class="n">address_book</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">address_book</span><span class="o">.</span><span class="n">SerializeToString</span><span class="p">())</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_book2</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">AddressBook</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">address_book2</span><span class="o">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address_book same with address_book2. the result is </span><span class="si">%d</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">address_book</span> <span class="o">==</span> <span class="n">address_book2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>cpp示例</h4>

<p>执行下面的命令，生成tutorial.pb.h和tutorial.pb.cc文件，将这两个文件拷到工作目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --cpp_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是一段示例代码</p>

<figure class='code'><figcaption><span>address_book_example.cc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &quot;tutorial.pb.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Verify that the version of the library that we linked against is</span>
</span><span class='line'>  <span class="c1">// compatible with the version of the headers we compiled against.</span>
</span><span class='line'>  <span class="n">GOOGLE_PROTOBUF_VERIFY_VERSION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tutorial</span><span class="o">::</span><span class="n">AddressBook</span> <span class="n">address_book</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">*</span> <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="p">.</span><span class="n">add_person</span><span class="p">();</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_id</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_name</span><span class="p">(</span><span class="s">&quot;ellios&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_email</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">::</span><span class="n">PhoneNumber</span><span class="o">*</span> <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="o">-&gt;</span><span class="n">add_phone</span><span class="p">();</span>
</span><span class='line'>      <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_number</span><span class="p">(</span><span class="s">&quot;13333333333&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_type</span><span class="p">(</span><span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">::</span><span class="n">HOME</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Write the new address book back to disk.</span>
</span><span class='line'>  <span class="n">fstream</span> <span class="n">output</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">trunc</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">address_book</span><span class="p">.</span><span class="n">SerializeToOstream</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Failed to write address book.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;address_book : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address_book</span><span class="p">.</span><span class="n">person_size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tutorial</span><span class="o">::</span><span class="n">AddressBook</span> <span class="n">address_book2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fstream</span> <span class="n">input</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">in</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'>  <span class="n">address_book2</span><span class="p">.</span><span class="n">ParseFromIstream</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Optional:  Delete all global objects allocated by libprotobuf.</span>
</span><span class='line'>  <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">ShutdownProtobufLibrary</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/proto">https://developers.google.com/protocol-buffers/docs/proto</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jdk7-fork-join]]></title>
    <link href="http://ellios.github.com//blog/2012/09/01/jdk7-fork-join/"/>
    <updated>2012-09-01T23:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/09/01/jdk7-fork-join</id>
    <content type="html"><![CDATA[<p><em>占坑&#8230;</em></p>

<h3>参考资料</h3>

<ul>
<li><a href="http://gee.cs.oswego.edu/dl/papers/fj.pdf"> fork/join framework article </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK7-TransferQueue]]></title>
    <link href="http://ellios.github.com//blog/2012/08/23/jdk7-transferqueue/"/>
    <updated>2012-08-23T09:11:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/23/jdk7-transferqueue</id>
    <content type="html"><![CDATA[<p>继续研究jdk7对concurrency的增强。这次研究下<a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166ydocs/jsr166y/TransferQueue.html">TransferQueue</a>，在jdk7里的实现是<a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166ydocs/jsr166y/LinkedTransferQueue.html">LinkedTransferQueue</a>。它实现了BlockingQueue的接口，并且提供了类似<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/SynchronousQueue.html">SynchronizeQueue</a>的功能。由于采用了CAS的方式对线程进行同步，减少了锁的开销，性能相对与其他的队列实现有了很大的提升。其内部的实现是一个FiFo的<a href="http://www.cs.rice.edu/~wns1/papers/2004-DISC-DDS.pdf">Dual Quque</a>。很多开源的项目，在jdk7之前，就早早的用上了这个东东，比如<a href="https://netty.io/">netty</a>，<a href="http://jolbox.com/">bonecp</a>，<a href="https://github.com/killme2008/xmemcached">xmemcached</a>&#8230;</p>

<p>TransferQueue的基本使用和BlockingQueue差不多，有点特殊的就是它的transfer接口。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://tech.puredanger.com/2009/02/28/java-7-transferqueue/">http://tech.puredanger.com/2009/02/28/java-7-transferqueue/</a></li>
<li><a href="http://www.yongboy.com/2012/02/forkjoinjsr166ytransferqueuelinkedtrans.html">http://www.yongboy.com/2012/02/forkjoinjsr166ytransferqueuelinkedtrans.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK排序算法]]></title>
    <link href="http://ellios.github.com//blog/2012/08/23/java-sort/"/>
    <updated>2012-08-23T09:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/23/java-sort</id>
    <content type="html"><![CDATA[<p>中午吃饭的时候和同事讨论了下JDK的排序算法的实现，同事坚持认为是简单的插入排序，觉得JDK应该不会这么弱，看了下JDK的源码，发现JDK针对排序是做了大量的优化的。</p>

<p>JDK对排序的实现在Arrays的sort方法里，Arrays里面有大量的重载的sort方法。而JDK7和JDK6的排序算法又有一些不同。</p>

<h3>JDK6排序实现</h3>

<p>JDK6对的排序实现针对基本类型和对象又有不同。</p>

<ol>
<li>对于基本类型，由于不要求排序是稳定的，因此使用了平均效率最好的排序算法——<a href="http://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf">快速排序</a>。为了避免最差情况的出现，JDK6对排序算法做了些优化。</li>
</ol>


<figure class='code'><figcaption><span>针对基本类型的快速排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 针对整形的排序实现</span>
</span><span class='line'><span class="cm"> * @param x 待排序的数据</span>
</span><span class='line'><span class="cm"> * @param off 起始位置</span>
</span><span class='line'><span class="cm"> * @param len 要排序的数据元素的个数</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort1</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//在小规模(size&lt;7)数组中，直接插入排序的效率要比快速排序高。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">off</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">+</span><span class="n">off</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">off</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">x</span><span class="o">[</span><span class="n">j</span><span class="o">];</span> <span class="n">j</span><span class="o">--)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//选择划分元素，即枢轴</span>
</span><span class='line'>    <span class="c1">//如果是小规模数组(size=7)，直接取中间元素作为枢轴</span>
</span><span class='line'>    <span class="c1">//如果是中等规模数组(7&lt;size&lt;=40)，则在数组首、中、尾三个位置上的数中取中间大小的数作为枢轴</span>
</span><span class='line'>    <span class="c1">//如果是大规模数组(size&gt;40),则在9个指定的数中取一个伪中数(中间大小的数s)</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="o">)</span> <span class="o">{</span>        <span class="c1">// Big arrays, pseudomedian of 9</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="mi">8</span><span class="o">;</span>
</span><span class='line'>            <span class="n">l</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span>     <span class="n">l</span><span class="o">+</span><span class="n">s</span><span class="o">,</span> <span class="n">l</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">m</span><span class="o">-</span><span class="n">s</span><span class="o">,</span>   <span class="n">m</span><span class="o">,</span>   <span class="n">m</span><span class="o">+</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span> <span class="c1">// Mid-size, med of 3</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 针对相同的元素做优化， 形成 v* (&lt;v)* (&gt;v)* v* 的数组</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">off</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">a</span><span class="o">++,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>            <span class="n">b</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="n">b</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">--);</span>
</span><span class='line'>            <span class="n">c</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">++,</span> <span class="n">c</span><span class="o">--);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将所有相同的枢轴都移到中间，形成(&lt;v)* v* (&gt;v)*</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="n">off</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="n">a</span>  <span class="o">);</span>  <span class="n">vecswap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">d</span><span class="o">-</span><span class="n">c</span><span class="o">,</span>   <span class="n">n</span><span class="o">-</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>  <span class="n">vecswap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span>   <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 递归排序子数组</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="n">sort1</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">d</span><span class="o">-</span><span class="n">c</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="n">sort1</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>针对对象数组，为了保证排序是稳定的，JDK6采用了归并排序，同样也做了一些优化。</li>
</ol>


<figure class='code'><figcaption><span>针对对象数据的归并排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 归并排序对象数组</span>
</span><span class='line'><span class="cm"> * @param src 原待排数组</span>
</span><span class='line'><span class="cm"> * @param dest 目的待排数组</span>
</span><span class='line'><span class="cm"> * @param low 待排数组的下界位置</span>
</span><span class='line'><span class="cm"> * @param high 待排数组的上界位置</span>
</span><span class='line'><span class="cm"> * @param off 从数组的第off个元素开始排序</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">src</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">Object</span><span class="o">[]</span> <span class="n">dest</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">low</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">high</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">off</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//在小规模(size&lt;7)数组中，使用归并排序。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="n">INSERTIONSORT_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">low</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">high</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">low</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="o">((</span><span class="n">Comparable</span><span class="o">)</span> <span class="n">dest</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">dest</span><span class="o">[</span><span class="n">j</span><span class="o">])&gt;</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//将src数组划分为两半，并分别递归做归并，</span>
</span><span class='line'>    <span class="c1">//在递归调用mergeSort时将desc和src的位置做了互换。</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">destLow</span>  <span class="o">=</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">destHigh</span> <span class="o">=</span> <span class="n">high</span><span class="o">;</span>
</span><span class='line'>    <span class="n">low</span>  <span class="o">+=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>    <span class="n">high</span> <span class="o">+=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">src</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="o">-</span><span class="n">off</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">src</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">high</span><span class="o">,</span> <span class="o">-</span><span class="n">off</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//如果低子列表中的最高元素小于高子列表中的最低元素，则忽略合并</span>
</span><span class='line'>    <span class="c1">//如果需要归并的两端low~(middle-1)，middle~high已经有序，即src[mid-1]==src[mid]。</span>
</span><span class='line'>    <span class="c1">//那么只需要将src的low~high赋值对应的dest即可，无需再归并。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(((</span><span class="n">Comparable</span><span class="o">)</span><span class="n">src</span><span class="o">[</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">dest</span><span class="o">,</span> <span class="n">destLow</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//将src的两个部分做归并操作，并赋值给dest</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">destLow</span><span class="o">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">low</span><span class="o">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">destHigh</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">&gt;=</span> <span class="n">high</span> <span class="o">||</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">Comparable</span><span class="o">)</span><span class="n">src</span><span class="o">[</span><span class="n">p</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">q</span><span class="o">])&lt;=</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">dest</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">p</span><span class="o">++];</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">dest</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">q</span><span class="o">++];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JDK7的排序实现</h3>

<ol>
<li><p>JDK7针对基本类型使用了<a href="http://iaroslavski.narod.ru/quicksort/DualPivotQuicksort.pdf">Dual Pivot Quicksort</a>,这种快速排序算法，相对于传统的单Pivot的快速排序效率要更好。</p></li>
<li><p>JDK7针对对象数组采用了<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">TimSort</a>, 这也是python的排序算法。</p></li>
</ol>


<h3>参考资料</h3>

<ul>
<li><a href="http://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf">Engineering a Sort Function</a></li>
<li><a href="http://hxraid.iteye.com/blog/665095">http://hxraid.iteye.com/blog/665095</a></li>
<li><a href="http://iaroslavski.narod.ru/quicksort/DualPivotQuicksort.pdf">Dual Pivot Quicksort </a></li>
<li><a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">TimSort</a></li>
<li><a href="http://yangdong.iteye.com/blog/1170214">http://yangdong.iteye.com/blog/1170214</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK7 Concurrency Phaser]]></title>
    <link href="http://ellios.github.com//blog/2012/08/14/jdk7-concurrency-phaser/"/>
    <updated>2012-08-14T16:51:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/14/jdk7-concurrency-phaser</id>
    <content type="html"><![CDATA[<p>继续研究Jdk7的新特性，这次看看jdk7对Concurrency的增强。concurrency这次新增了3个新元素。</p>

<ol>
<li>Phaser,类似于CountDownLatch和CyclicBarrier</li>
<li>TransferQueue, 比SynchronousQueue更加高效的队列</li>
<li>Fork-Join, 类似与MapReduce的东东</li>
</ol>


<p>体验下Phaser, 这个东东和CountDownLatch,CyclicBarrier的功能比较类似，但是要更加灵活，提供了更多的控制。</p>

<p>先来回顾下CountDownLatch, CyclicBarrier。下面这段程序每次同时执行一组任务，然后当这一组任务执行完后，再执行下一组。用CyclicBarrier对每组的各个任务的执行时机进行控制，用CountDownLatch对各组任务的执行时机进行控制。</p>

<div><script src='https://gist.github.com/3361796.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>复习完毕，下面来把Phaser好好弄清楚。这个东东究竟是个啥，为啥能比CountDownLatch，CyclicBarrier更灵活呢。Phaser类的注释里对Phaser做了充分的描述，我们这里简单整理下。</p>

<p>Phaser是一个可重用的同步Barrier，类似与CountDownLatch和CyclicBarrier，但是要更加灵活</p>

<ol>
<li><p><em>Registration</em>. Phaser支持通过register()和bulkRegister(int parties)方法来动态调整注册任务的数量，此外也支持通过其构造函数进行指定初始数量。在适当的时机，Phaser支持减少注册任务的数量，例如 arriveAndDeregister()。单个Phaser实例允许的注册任务数的上限是65535。</p></li>
<li><p><em>Arrival</em>. 正如Phaser类的名字所暗示，每个Phaser实例都会维护一个phase number，初始值为0。每当所有注册的任务都到达Phaser时，phase number累加，并在超过Integer.MAX_VALUE后清零。arrive()和arriveAndDeregister()方法用于记录到 达，arriveAndAwaitAdvance()方法用于记录到达，并且等待其它未到达的任务。</p></li>
<li><p><em>Termination</em>.Phaser支持终止。Phaser终止之后，调用register()和bulkRegister(int parties)方法没有任何效果，arriveAndAwaitAdvance()方法也会立即返回。触发终止的时机是在protected boolean onAdvance(int phase, int registeredParties)方法返回时，如果该方法返回true，那么Phaser会被终止。默认实现是在注册任务数为0时返回true（即 return registeredParties == 0;）。此外，forceTermination()方法用于强制终止，isTerminated()方法用于判断是否已经终止。</p></li>
<li><p><em>Tiering</em>. Phaser支持层次结构，即通过构造函数Phaser(Phaser parent)和Phaser(Phaser parent, int parties)构造一个树形结构。这有助于减轻因在单个的Phaser上注册过多的任务而导致的竞争，从而提升吞吐量，代价是增加单个操作的开销。</p></li>
</ol>


<p>描述已经好清楚了，下面我们用Phaser实现上面类似功能的程序。</p>

<div><script src='https://gist.github.com/3371555.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>参考资料</h3>

<ul>
<li><a href="http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/">http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/</a></li>
<li><a href="http://tech.puredanger.com/2009/02/28/java-7-transferqueue/">http://tech.puredanger.com/2009/02/28/java-7-transferqueue/</a></li>
<li><a href="http://yaofeng928.iteye.com/blog/1136648">http://yaofeng928.iteye.com/blog/1136648</a></li>
<li><a href="http://whitesock.iteye.com/blog/1135457">http://whitesock.iteye.com/blog/1135457</a></li>
<li><a href="http://www.blogjava.net/xylz/archive/2010/07/09/325612.html">CountDownLatch的源码分析</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffeescript语法篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref/"/>
    <updated>2012-08-09T01:18:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref</id>
    <content type="html"><![CDATA[<p>上一篇简单分析了下CoffeeScript的源码，这篇开始介绍CoffeeScript的语法。CoffeeScript的语法相比JavaScript要清爽好多，如果有Python，Ruby的经验的话，基本上半天就差不多了。CoffeeScript最终还是会被编译为JavaScript，所以基本的数据类型和JavaScript是一样，学习的时候和编译的JavaScript对应起来会更容易理解。</p>

<h3>Examples</h3>

<p>先睹为快，给个二分查找的例子。</p>

<figure class='code'><figcaption><span>二分查找例子 binary_search.coffee   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">list</span><span class="o">.</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">val</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mid</span> <span class="k">if</span> <span class="n">val</span> <span class="n">is</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="k">then</span> <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">2</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span><span class="p">,</span> <span class="mi">30</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">4</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="o">]</span><span class="p">,</span> <span class="mi">1200</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">0</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译后的js代码如下</p>

<figure class='code'><figcaption><span>编译后的JS binary_search.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">high</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">],</span> <span class="nx">low</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">high</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">low</span> <span class="o">&lt;</span> <span class="nx">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">low</span> <span class="o">+</span> <span class="nx">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">val</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">mid</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">&lt;</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">low</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">high</span> <span class="o">=</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="mi">30</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="p">],</span> <span class="mi">1200</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="p">],</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>后面会介绍CoffeeScript的各个语法点。</p>

<h3>Functions</h3>

<figure class='code'><figcaption><span>coffee函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#匿名函数</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="k">do</span> <span class="o">-&gt;</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="c1">#非匿名函数，函数隐式返回最后一个表达式的值</span>
</span><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="c1">#调用函数</span>
</span><span class='line'><span class="n">cube</span>   <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">square</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="c1">#函数可以有默认参数</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="p">(</span><span class="n">container</span><span class="p">,</span> <span class="n">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="s2">&quot;Filling the </span><span class="si">#{</span><span class="n">container</span><span class="si">}</span><span class="s2"> with </span><span class="si">#{</span><span class="n">liquid</span><span class="si">}</span><span class="s2">...&quot;</span>
</span><span class='line'><span class="c1">#函数绑定</span>
</span><span class='line'><span class="n">setName</span> <span class="o">=</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>编译后</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cube</span><span class="p">,</span> <span class="nx">fill</span><span class="p">,</span> <span class="nx">setName</span><span class="p">,</span> <span class="nx">square</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})());</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">square</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">2</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">cube</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fill</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">liquid</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Filling the &quot;</span> <span class="o">+</span> <span class="nx">container</span> <span class="o">+</span> <span class="s2">&quot; with &quot;</span> <span class="o">+</span> <span class="nx">liquid</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffeescript源码篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-source-code/"/>
    <updated>2012-08-09T01:17:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-source-code</id>
    <content type="html"><![CDATA[<p>最近为了凑运费，买了本《深入浅出CoffeeScript》，本来只打算随便翻翻的，不过看了以后发现<a href="http://coffeescript.org/">CoffeeScript</a>还是满有意思的，于是决定好好研究下，这里分享下自己的学习过程。</p>

<h4>Install</h4>

<p>装之前需要提前装好node和npm(具体怎么装google之吧)，node和npm装好后，执行下面的命令，就可以开始体验CoffeeScript了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install -g coffee-script
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Compile</h4>

<p>简单的体验下后，对于它把那么灵活的语法转化为比较工整的JS语法有点小好奇，于是把它的源码clone出来，简单的研究了下。</p>

<p>先试着编译它的源码，编译的操作过程如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/jashkenas/coffee-script.git
</span><span class='line'><span class="nb">cd </span>coffee-script
</span><span class='line'>bin/cake build:full
</span></code></pre></td></tr></table></div></figure>


<p>OK，编译很迅速，大家可以对源码做各种折腾了。</p>

<hr />

<h4>Jison</h4>

<p>CoffeeScript的核心是一个编译器，它把符合CoffeeScript语法规则的文件转化为JS语法。而CoffeeScript又是利用<a href="http://zaach.github.com/jison/">Jison</a>实现词法和语法的解析。CoffeeScript将语法规则都写到grammar.js文件里，然后利用Jison生成符合该语法规则的编译器。</p>

<p>只要写个简单的语法规则，就可以实现一个编译器，这东西太高级了，于是开始折腾Jison。它的网站上有很多例子，其中有一个生成计算程序的例子，我把它稍微缩减下，让+做-，-做+。</p>

<figure class='code'><figcaption><span>simple_cal.jison</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">/*</span> <span class="n">lexical</span> <span class="n">grammar</span> <span class="o">*/</span>
</span><span class='line'><span class="o">%</span><span class="n">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span>
</span><span class='line'>\<span class="n">s</span><span class="o">+</span>                   <span class="o">/*</span> <span class="n">skip</span> <span class="n">whitespace</span> <span class="o">*/</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="err">?</span>\<span class="n">b</span>  <span class="k">return</span> <span class="s">&#39;NUMBER&#39;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;-&quot;</span>                   <span class="k">return</span> <span class="s">&#39;-&#39;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;+&quot;</span>                   <span class="k">return</span> <span class="s">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="n">EOF</span><span class="o">&gt;&gt;</span>               <span class="k">return</span> <span class="s">&#39;EOF&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">/</span><span class="n">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*</span> <span class="n">operator</span> <span class="n">associations</span> <span class="ow">and</span> <span class="n">precedence</span> <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">left</span> <span class="s">&#39;+&#39;</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">start</span> <span class="n">expressions</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="o">/*</span> <span class="n">language</span> <span class="n">grammar</span> <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">expressions</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">e</span> <span class="n">EOF</span>
</span><span class='line'>        <span class="p">{</span><span class="n">typeof</span> <span class="n">console</span> <span class="o">!==</span> <span class="s">&#39;undefined&#39;</span> <span class="err">?</span> <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="err">$</span><span class="mi">1</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">e</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">e</span> <span class="s">&#39;+&#39;</span> <span class="n">e</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="o">-</span><span class="err">$</span><span class="mi">3</span><span class="p">;}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">e</span> <span class="s">&#39;-&#39;</span> <span class="n">e</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="o">+</span><span class="err">$</span><span class="mi">3</span><span class="p">;}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">NUMBER</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="n">Number</span><span class="p">(</span><span class="n">yytext</span><span class="p">);}</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>体验下效果把，当执行7-3时，返回的却是10。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt;&gt; jison simple_cal.jison <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;7-3&quot;</span> &gt; 2 <span class="o">&amp;&amp;</span> node simple_cal.js 2
</span><span class='line'>&gt;&gt; 10
</span></code></pre></td></tr></table></div></figure>


<p>再深入的原理，就要涉及编译原理的内容，那个东西偶学得可烂的，以后有时间再研究下把。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://coffeescript.org/">http://coffeescript.org/</a></li>
<li><a href="http://zaach.github.com/jison/">http://zaach.github.com/jison/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HotSpot各种GC的输出]]></title>
    <link href="http://ellios.github.com//blog/2012/08/06/java-gc-output/"/>
    <updated>2012-08-06T18:50:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/06/java-gc-output</id>
    <content type="html"><![CDATA[<p>闲着无事体验下jdk7的一些新特性，先体验下G1，顺手把其他的GC方式也复习下。</p>

<p>用来测试的程序</p>

<figure class='code'><figcaption><span>测试程序  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">gc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapOOM</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">OOMObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">OOMObject</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">OOMObject</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">OOMObject</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SerialGC</h3>

<p>执行命令如下：</p>

<pre><code>java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC gc.HeapOOM
</code></pre>

<p>输出如下</p>

<pre><code>[GC [DefNew: 6919K-&gt;1023K(9216K), 0.0184790 secs] 6919K-&gt;4907K(19456K), 0.0185330 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
[GC [DefNew: 9215K-&gt;1024K(9216K), 0.0220750 secs] 13099K-&gt;10753K(19456K), 0.0221190 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
[GC [DefNew: 8510K-&gt;8510K(9216K), 0.0000280 secs][Tenured: 9729K-&gt;7736K(10240K), 0.0590890 secs] 18240K-&gt;16044K(19456K), [Perm : 2364K-&gt;2364K(21248K)], 0.0592060 secs] [Times: user=0.05 sys=0.00, real=0.05 secs] 
[Full GC [Tenured: 7736K-&gt;7730K(10240K), 0.0548170 secs] 16044K-&gt;16038K(19456K), [Perm : 2364K-&gt;2362K(21248K)], 0.0548950 secs] [Times: user=0.06 sys=0.00, real=0.06 secs]
</code></pre>

<h3>Parallel GC</h3>

<p>执行命令如下：</p>

<pre><code>java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseParallelGC gc.HeapOOM
</code></pre>

<p>输出如下：</p>

<pre><code>[GC [PSYoungGen: 6893K-&gt;1017K(9216K)] 6893K-&gt;4937K(19456K), 0.0185000 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
[GC [PSYoungGen: 9209K-&gt;1008K(9216K)] 13129K-&gt;10470K(19456K), 0.0256190 secs] [Times: user=0.03 sys=0.01, real=0.02 secs] 
[Full GC [PSYoungGen: 1008K-&gt;187K(9216K)] [ParOldGen: 9462K-&gt;10237K(10240K)] 10470K-&gt;10425K(19456K) [PSPermGen: 2367K-&gt;2365K(21248K)], 0.2739010 secs] [Times: user=0.34 sys=0.00, real=0.28 secs] 
</code></pre>

<h3>Concurrent Mark Sweep</h3>

<p>执行命令如下:</p>

<pre><code>java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC gc.HeapOOM
</code></pre>

<p>输出如下：</p>

<pre><code>[GC [ParNew: 6904K-&gt;1024K(9216K), 0.1083590 secs] 6904K-&gt;6785K(19456K), 0.1084710 secs] [Times: user=0.15 sys=0.01, real=0.11 secs] 
[GC [ParNew: 9216K-&gt;9216K(9216K), 0.0000500 secs][CMS: 5761K-&gt;8649K(10240K), 0.0645400 secs] 14977K-&gt;13591K(19456K), [CMS Perm : 2365K-&gt;2363K(21248K)], 0.0647080 secs] [Times: user=0.06 sys=0.00, real=0.06 secs] 
[GC [1 CMS-initial-mark: 8649K(10240K)] 13708K(19456K), 0.0081840 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
[Full GC [CMS[CMS-concurrent-mark: 0.023/0.023 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
 (concurrent mode failure): 8649K-&gt;8649K(10240K), 0.0681890 secs] 13708K-&gt;13606K(19456K), [CMS Perm : 2363K-&gt;2363K(21248K)], 0.0682770 secs] [Times: user=0.07 sys=0.00, real=0.07 secs] 
[Full GC [CMS: 10239K-&gt;10240K(10240K), 0.0688260 secs] 19455K-&gt;17275K(19456K), [CMS Perm : 2366K-&gt;2366K(21248K)], 0.0689230 secs] [Times: user=0.07 sys=0.00, real=0.07 secs] 
[GC [1 CMS-initial-mark: 10240K(10240K)] 17430K(19456K), 0.0111890 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
[CMS-concurrent-mark: 0.027/0.027 secs] [Times: user=0.05 sys=0.00, real=0.03 secs] 
[Full GC [CMS[CMS-concurrent-preclean: 0.025/0.025 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
 (concurrent mode failure): 10240K-&gt;10240K(10240K), 0.0884470 secs] 19412K-&gt;19412K(19456K), [CMS Perm : 2366K-&gt;2366K(21248K)], 0.0885610 secs] [Times: user=0.09 sys=0.00, real=0.09 secs]
</code></pre>

<h3>G1</h3>

<p>执行命令如下：</p>

<pre><code>java -verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC gc.HeapOOM
</code></pre>

<p>G1的输出好大一坨,这里就主要描述它的各个阶段，详细的内容就略过了,有兴趣的话，自己测把。</p>

<pre><code>[GC pause (young), 0.07679200 secs]
   [Parallel Time:  76.4 ms]
      [GC Worker Start (ms):  126.0  126.1
       Avg: 126.1, Min: 126.0, Max: 126.1, Diff:   0.1]
      [Ext Root Scanning (ms):  0.8  0.7
       Avg:   0.8, Min:   0.7, Max:   0.8, Diff:   0.1]
      [Update RS (ms):  7.6  8.0
       Avg:   7.8, Min:   7.6, Max:   8.0, Diff:   0.4]
         [Processed Buffers : 3 10
          Sum: 13, Avg: 6, Min: 3, Max: 10, Diff: 7]
      [Scan RS (ms):  18.0  11.1
       Avg:  14.5, Min:  11.1, Max:  18.0, Diff:   6.9]
      [Object Copy (ms):  49.9  56.5
       Avg:  53.2, Min:  49.9, Max:  56.5, Diff:   6.6]
      [Termination (ms):  0.0  0.0
       Avg:   0.0, Min:   0.0, Max:   0.0, Diff:   0.0]
         [Termination Attempts : 1 1
          Sum: 2, Avg: 1, Min: 1, Max: 1, Diff: 0]
      [GC Worker End (ms):  202.4  202.4
       Avg: 202.4, Min: 202.4, Max: 202.4, Diff:   0.0]
      [GC Worker (ms):  76.3  76.2
       Avg:  76.3, Min:  76.2, Max:  76.3, Diff:   0.1]
      [GC Worker Other (ms):  0.1  0.2
       Avg:   0.1, Min:   0.1, Max:   0.2, Diff:   0.1]
   [Clear CT:   0.1 ms]
   [Other:   0.3 ms]
      [Choose CSet:   0.0 ms]
      [Ref Proc:   0.1 ms]
      [Ref Enq:   0.0 ms]
      [Free CSet:   0.0 ms]
   [Eden: 7168K(7168K)-&gt;0B(3072K) Survivors: 0B-&gt;1024K Heap: 10138K(20M)-&gt;8858K(20M)]
 [Times: user=0.11 sys=0.00, real=0.08 secs] 
[GC pause (young) (initial-mark), 0.05340800 secs] 
[GC concurrent-root-region-scan-start]
[GC concurrent-root-region-scan-end, 0.0015220]
[GC concurrent-mark-start]
[GC pause (young), 0.04182800 secs]
[Full GC 13M-&gt;10M(20M), 0.0579320 secs]
 [Times: user=0.07 sys=0.00, real=0.06 secs] 
[GC concurrent-mark-abort]
[GC pause (young) (to-space overflow), 0.18594400 secs]
[GC pause (young) (initial-mark), 0.02209700 secs]
[GC concurrent-root-region-scan-start]
[GC concurrent-root-region-scan-end, 0.0000130]
[GC concurrent-mark-start]
[Full GC 17M-&gt;15M(20M), 0.0831100 secs]
 [Times: user=0.09 sys=0.01, real=0.08 secs] 
[GC pause (young), 0.00407500 secs]
[GC concurrent-mark-abort]
[Full GC 15M-&gt;15M(20M), 0.0741120 secs]
 [Times: user=0.08 sys=0.00, real=0.07 secs] 
[Full GC 15M-&gt;15M(20M), 0.0801960 secs]
 [Times: user=0.08 sys=0.00, real=0.08 secs] 
</code></pre>

<h3>参考资料</h3>

<p><a href="http://blog.csdn.net/firecoder/article/details/7225654">http://blog.csdn.net/firecoder/article/details/7225654</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java常用单例]]></title>
    <link href="http://ellios.github.com//blog/2012/08/03/java-singleton/"/>
    <updated>2012-08-03T23:55:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/03/java-singleton</id>
    <content type="html"><![CDATA[<p>单例是最常用到的一个设计模式，java的单例实现方式还是挺多的，总结下遇到的一些单例的实现</p>

<p>一. 最简单的单例</p>

<figure class='code'><figcaption><span>最简单的单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种有并发问题，为了避免并发问题需要在判断的时候加锁。于是有了下面的实现。</p>

<p>二. 加同步的单例</p>

<figure class='code'><figcaption><span>加同步的单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式在每次获取对象的时候都要先获取锁，如果多次获取对象的话，会造成一些性能开销。考虑到只有在第一次创建对象时才存在并发问题，于是便有了双重判断的实现方式。</p>

<p>三. 双重判断的同步的单例</p>

<figure class='code'><figcaption><span>双重判断的同步的单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">synchronized</span><span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                  <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                      <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>java的同步有很多陷阱，考虑到JMM的指令重排问题，instance被声明为volatile，这能够避免一部分问题，但是仍然会有一些并发的陷阱，比如CPU内部流水线也会做些指令的重排，这可不是受JVM指令控制的。如果我们创建一个非常大的单例对象，有可能会出现这种小概率事件。于是，干脆将同步问题扼杀在摇篮里。</p>

<p>四. 典型饥饿模式的单例</p>

<figure class='code'><figcaption><span>典型饥饿模式的单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JVM在对类做初始化时，会做同步处理，以保证一个类只被初始化一次。一般，饥饿模式的单例已经能满足大多数的需求，如果你非常渴望延迟加载，而又不想自己去做同步的话。可以试试第5种方式。</p>

<p>五. 非同步延迟单例</p>

<figure class='code'><figcaption><span>非同步延迟单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonHolder</span><span class="o">{</span>
</span><span class='line'>          <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">SingletonHolder</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式利用JVM初始化的机制来达到延迟加载的目的，个人比较喜欢这种单例实现。不过具体实现的时候还是可能会有各种问题。比如构造类的时候可能出现异常，或者在初始化的时候出现死锁等问题。
最近看到有人用枚举来实现单例，也挺巧妙的。</p>

<p>六. 枚举单例</p>

<figure class='code'><figcaption><span>枚举单例  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>觉得这种方式比较容易引起歧义，没太想好它的应用场景。不过保证单例是没啥问题。</p>

<p>最近看python的一些设计模式，看到一些观点，认为其实各种单例的实现方式或多或少都有些问题，主张大家少用单例。如果要达到单例的效果，可以把对象提前构造出来，弄成一个类似全局变量的东东来用。个人还是比较赞同的，纯天然的总比再加工的更让人放心点。</p>

<h3>参考资料</h3>

<p><a href="http://www.blogjava.net/xylz/archive/2009/12/18/306622.html">http://www.blogjava.net/xylz/archive/2009/12/18/306622.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBCP源码分析]]></title>
    <link href="http://ellios.github.com//blog/2012/07/23/dbcp-source/"/>
    <updated>2012-07-23T11:39:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/07/23/dbcp-source</id>
    <content type="html"><![CDATA[<h3>Why 连接池</h3>

<p>一般我们进行一个数据库操作时，都要进行下面的步骤</p>

<ol>
<li>客户端与服务器端建立连接</li>
<li>执行数据库操作</li>
<li>释放连接</li>
</ol>


<p>频繁的数据库的连接和释放会占用大量的时间和资源，于是就有必要重复利用数据库连接，这便要用到连接池技术。</p>

<h3>DBCP的使用和配置</h3>

<h5>DBCP的使用</h5>

<p>一个简单的使用示例，但是代码还是有点长，这里放个传送门，有兴趣的可以点进去看看。
<a href="https://gist.github.com/3161996">DBCPDemo</a></p>

<h5>DBCP的配置</h5>

<p>配置信息看这里把，传送门<a href="http://commons.apache.org/dbcp/configuration.html">DBCP Configuration</a></p>

<h3>DBCP源码分析</h3>

<p>DBCP其实就是一个存储数了据库连接的Object Pool，Object Pool是利用了commons-pool实现的。下面从BasicDataSource开始逐步分析DBCP的代码。
<img src="http://ellios.github.com//images/bds.png" alt="BasicDataSource类结构图" />
从上图可以看出，BasicDataSource可以看成是一个Adapter模式的实现，其封装了真正实现连接池pool的PoolingDataSource，而PoolingDataSource实现了获
取数据库连接的getConnection方法。</p>

<figure class='code'><figcaption><span>getConnection  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">Connection</span><span class="o">)(</span><span class="n">_pool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">conn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">conn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PoolGuardConnectionWrapper</span><span class="o">(</span><span class="n">conn</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">conn</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>_pool就是ObjectPool，其实现是GenericObjectPool，这就是连接池的核心，真正实现Object Pool的地方。PoolGuardConnectionWrapper对Connection做了简单封装，如果通过该连接对数据库进行操作时，连接已经关闭，就会抛出异常。</p>

<p>下面我们重点分析GenericObjectPool的代码，GenericObjectPool的类结构图如下图所示。
<img src="http://ellios.github.com//images/gop.png" alt="GenericObjectPool类结构图" /></p>

<p>GenericObjectPool有三个内部类，分别是Config，Evictor和Latch.Config类包含了各种默认配置信息，如maxActive，maxWait（单位毫秒）等。Evictor类是清道夫，对于pool里过期的Idle对象会进行清理。Latch封装了真实的对象，这里为什么要对真实的对象进行封装，主要是拿它用来排队的，以保证请求的公平性，先来先拿。PoolableObjectFactory是生成对象的工厂接口，在使用pool前需要将其实现（这里是PoolableConnectionFactory）赋给pool的_factory。</p>

<p>GenericObjectPool主要的接口有两个，分别是borrowObject和returnObject。先看下borrowObject的逻辑，代码太长。这里只贴一些主要的代码，有兴趣的可以自己去看。</p>

<div><script src='https://gist.github.com/3163574.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>再看下returnObject,逻辑简单了好多。</p>

<div><script src='https://gist.github.com/3163684.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>话说DBCP和common-pool的代码好老，最近看了下bonecp，据说比DBCP快了30被，以后分析下他的代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python程序打包成exe]]></title>
    <link href="http://ellios.github.com//blog/2012/06/08/py2exe/"/>
    <updated>2012-06-08T22:14:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/06/08/py2exe</id>
    <content type="html"><![CDATA[<p>帮朋友用wxpython写了一个小程序，为了方便他使用，需要打包成exe。记得py2exe可以,看了下它的文档，写了一个简单的打包程序setup.py。</p>

<figure class='code'><figcaption><span>setup.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">py2exe</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;C:/Program Files/Microsoft </span><span class="se">\</span>
</span><span class='line'><span class="s">Visual Studio 10.0/VC/redist/x86/Microsoft.VC100.CRT&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data_files</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&quot;Microsoft.VC100.CRT&quot;</span><span class="p">,</span> <span class="n">glob</span><span class="p">(</span><span class="s">r&#39;C:/Program Files/Microsoft </span><span class="se">\</span>
</span><span class='line'><span class="s">Visual Studio 10.0/VC/redist/x86/Microsoft.VC100.CRT/*.*&#39;</span><span class="p">))]</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span>
</span><span class='line'>      <span class="n">data_files</span><span class="o">=</span><span class="n">data_files</span><span class="p">,</span>
</span><span class='line'>      <span class="n">console</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;xxx.py&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我的python是2.7版本的，其他版本的打包程序可能具体还有些不同。打包的时候需要使用VC来编译，所以需要预装VC2008以上的版本，我装的是VC2010.运行程序</p>

<pre><code>python setup.py py2exe
</code></pre>

<p>就会生成一个dist的目录，里面就有生成的exe文件和一大堆的pyd，dll，以及一些VC的运行时库文件。文件很多，py2exe有些参数，可以对文件数进行压缩。具体参数大家可以看文档。</p>

<h3>参考资料</h3>

<ul>
<li>手动制作python的exe可执行程序 <a href="http://wiki.woodpecker.org.cn/moin/LeoJay/PyPackage">http://wiki.woodpecker.org.cn/moin/LeoJay/PyPackage</a></li>
<li>py2exe Tutorial <a href="http://www.py2exe.org/index.cgi/Tutorial">http://www.py2exe.org/index.cgi/Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java版Berkeley db安装]]></title>
    <link href="http://ellios.github.com//blog/2012/06/08/bdb-install/"/>
    <updated>2012-06-08T22:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/06/08/bdb-install</id>
    <content type="html"><![CDATA[<p>下载源码包<a title="db-4.5.20.tar.gz" href="http://download.oracle.com/berkeley-db/db-4.5.20.tar.gz">db-4.5.20.tar.gz</a> 执行下面的命令，编译源码</p>


<pre>tar -xzf db-4.5.20.tar.gz
cd db-4.5.20/build_unix
../dist/configure --prefix=/opt/apps/berkeleydb --enable-java
make &amp;&amp; make install
</pre>


<p>将动态库加到系统查找路径</p>


<pre>echo &lsquo;/usr/local/berkeleydb/lib/&rsquo; &gt;&gt; /etc/ld.so.conf
ldconfig
</pre>


<p>或者</p>


<pre>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/apps/berkeleydb/lib</pre>


<p>顺便提下windows下的安装 下载<a title="db-4.5.20.msi" href="http://download.oracle.com/berkeley-db/db-4.5.20.msi">db-4.5.20.msi</a>，安装。 将安装目录下的bin/libdb_java45.dll，bin/libdb45.dll和bin/msvcp71.dll拷贝到系统的system32目录下。  <span style="color: grey;">db.jar是java的接口类库，可以通过他来访问dbd</span></p>


<h3>参考资料</h3>

<ul>
<li> <a title="berkeley db" href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index.html">berkeley db</a> </li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jnotify]]></title>
    <link href="http://ellios.github.com//blog/2012/06/08/jnotify/"/>
    <updated>2012-06-08T11:38:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/06/08/jnotify</id>
    <content type="html"><![CDATA[<p>eclipse装了aptana，结果报</p>


<blockquote>JNotifyAdapterLinux.registerToSubTree : warning, failed to register /opt/workspace/django/django/contrib/localflavor/locale/ar/.svn/tmp/prop-base :Error watching /opt/workspace/django/django/contrib/localflavor/locale/ar/.svn/tmp/prop-base : No space left on device</blockquote>


<p>查了下，aptana使用了jnotify，而jnotify使inotify的java封装，inotify对每个进程能够观察的文件数使是有限制的。可以把限制加大一些来解决这个问题。</p>


<pre>su
echo 32000 &gt; /proc/sys/fs/inotify/max_user_watches
</pre>


<p>顺便发掘了下jnotify，对文件的增删改等事件进行监听的java库，使用也很简单。  </p>


<h3>参考文档</h3>

<ul>
<li> jnotify <a title="http://jnotify.sourceforge.net/" href="http://jnotify.sourceforge.net/">http://jnotify.sourceforge.net/</a> </li>
</ul>

]]></content>
  </entry>
  
</feed>
