<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ellios's blog]]></title>
  <link href="http://ellios.github.com//atom.xml" rel="self"/>
  <link href="http://ellios.github.com//"/>
  <updated>2016-01-05T17:15:10+08:00</updated>
  <id>http://ellios.github.com//</id>
  <author>
    <name><![CDATA[ellios]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015个人总结]]></title>
    <link href="http://ellios.github.com//blog/2016/01/02/2015-summary/"/>
    <updated>2016-01-02T19:43:00+08:00</updated>
    <id>http://ellios.github.com//blog/2016/01/02/2015-summary</id>
    <content type="html"><![CDATA[<p>刚把部门总结写完，顺带着想起2015这一整年的经历，对个人的影响还是挺大的，于是决定把我的2015给记个流水出来。</p>

<p>年初，力扑默而不宣地散了，到最后李有兵也没站出来给大家个说法，灰溜溜的跑了，好像世上再也不存在这个人。拼命加班一个多月的工资没了，之前拼命干了大半年的产品还没正式出世就死了，内心难过和自责了好久。和大家一起去仲裁，但是最终发现也只是走个形式而已，面对一个存心耍无赖的人，法律也只会呵呵。结局虽然不是很好，但是对于自己确实是一段宝贵的经历,经历了一个公司从出生到死亡的过程，经历了带领40人团队的巨大跳跃，经历了一个团队打了鸡血拼命工作到最后不欢而散的过程，经历了一个号称身家10多亿的老板从极度虚幻到跌落尘埃的过程，经历了半夜12点警察叔叔的狠狠呵斥，经历了。。。，真正参与过了这么一段创业，才明白创业的各种辛酸和困难。</p>

<p>年初除了力扑的事情收尾，然后就是面试，找工作。面了3，4家公司，最终到了乐视体育。3月底正式入职，然后就开始各种忙，持续了半年多的996的状态，不过忙下来，收获还可以。</p>

<ul>
<li>从0开始组建了服务端团队。(招人特别辛酸,这边招人挑学校和公司,工资给的在业内也不算高,流程还长正常要1个月才能下offer,好多不错的人到人力环节就被卡了,没办法,只能去前东家挖人了,挖了3个人过来,前领导知道了,现在还不和说话)。</li>
<li>团队在高强度的工作状态中坚持了下来,提高很快,目前逐步步入了正规,我也能从大量的coding中解放出来了。</li>
<li>团队参与的多个重要项目基本都完成了,而且公司这些产品的发展趋势和关注度都还不错,作为核心的服务端团队负责人,内心成就感也还不错。</li>
<li>入职前说的股权协议终于签了,一块石头落了地，杂七杂八的念头也少了,希望最终能有所收获吧。</li>
<li>技术管理的路走得越来越稳了,个人觉得现在算是一个合适的技术管理者了。</li>
</ul>


<p>这一年工作主要的收获还是偏管理方向，技术方向的收获不大，专注研究一些技术的时间越来越少，一些新的技术基本都只能大概了解，处于吃老本的阶段，不过吃老本的过程中，对技术的理解想相对深刻了些。新的一年计划带领团队做些更技术含量的事情，实时推送，搜索，推荐，大数据，知识图谱大概这些，希望各个方向都能有初步的进展。</p>

<p>今年大部头的技术书籍基本没看过，目前在看《R语言实战》，其他粗略地看了《创业维艰》，《从0到1》，《企业估值就是讲故事》，《经济学原理》，《聪明的投资者》，《怎样选择成长股》新一年计划还是这些方向吧，创业和投资，为若干年后的个人规划做些准备。</p>

<p>今年终于在北京把房买了，了却了一桩大心愿。买房的过程还是挺戏剧的，十一放假爸妈突然说可以提供一部分资金让我们买房，本来没有买房计划的我和老婆一合计，决定今年就把房买了。于是第二天就杀北京看房，第三天就交了定金，一个月后办完了各种手续。事后想想，我和老婆在人生几件大事上基本都是跟着感觉走，不过最终结果都还可以。</p>

<p>家庭生活越来越和谐了，和老婆基本没有7年之痒的问题。晶晶4岁了，喜欢臭美，喜欢画画，喜欢哭，性格善良(除了爱欺负我)，长大的梦想是当画家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业记二]]></title>
    <link href="http://ellios.github.com//blog/2014/08/24/startup2/"/>
    <updated>2014-08-24T22:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2014/08/24/startup2</id>
    <content type="html"><![CDATA[<p>一眨眼，已经快两个月了，距离网站上线刚刚过去了一个星期，自己终于能得闲整理下这段时间在创业团队工作的过程了。回想从刚进入团队到网站上线，虽然只有一个半月的时间，不过那段时间每天都觉得像是已经过了好几年似的，心里承受的压力还是挺大的，每天如果不工作到很晚，心里都会很不安，怕是有什么事情被自己漏过了。尤其是最初的两周，自己需要定下短期的技术方案；把一些重要的事情分解到个人；鼓舞整个团队的士气；四处招人，但是最终只有一个人顺利入职；降低各种不确定因素造成的影响。每一天都在挑战自己的神经，70%的事情自己都是从新开始。管理一个技术团队，之前一直觉得是挺简单地一件事，现在一个半月走下来，其中各种不容易，还是挺有感触的。</p>

<p>由于产品迟迟不能上线，整个公司包括运营和市场团队很长一段时间是在空转，巧妇难为无米之炊。这个时候，技术和产品团队自然要承受最大的压力，但是由于缺乏具体的执行方案，技术和产品这个时候也是处于无所事事的状态。这就是我决定加入时，整个公司的状态。看到这种情况，自己心里开始发急了，如果这种状态一直持续下去，之前定好的上线日期肯定又要delay了，而如果再次delay，投资人很可能对整个公司的执行力失去信心，当时真的希望技术和产品团队的每个人第二天能跟打了兴奋剂一样，每天都能开始通宵。但是，面对现实，团队不可能一下子飞起来，而我也必须加快行动的步伐了。提前一周加入了团队，和大家简单聊了下，团队成员的水平基本处于初中级的水平，缺乏对大型系统整体把控的能力，自己短期内需要充当架构师的角色，把整个系统分割成效的任务点让大家开发，另外慢慢的去培养几个人。第二天，召集技术和产品团队的所有人开了次动员会，告诉大家请看很严重，要强制大家加班了，按时上线奖金大大的，胡萝卜加大棒那套。讲话的时候自带洗脑光环，跟之前公司的CTO学的，能影响到几个算几个。谈话加大会的效果还不错，开始有一大半的人在加班了。初步解决了大家工作积极性的问题，开始解决技术性的问题了。试着和大家沟通自己的技术想法，但是发现大家完全不能理解，而且对你报以怀疑的目光，唉，不在一个频道的感觉。只能自己亲自动手了，趁着周末，搭建gitlab，把项目从gradle迁移回maven(实在没精力再去研究gradle了)，搭建测试环境，还是做技术的活顺手点。有点孤独感，安慰自己，在把整个团队在往自己设想的方向上给掰了。</p>

<p>又是一周，整个团队在我指引的方向上终于有了点感觉，这周计划的任务，大家基本都完成了。刚有点感觉的时候，不确定因素开始出现了，之前本来说好要加入团队的几个核心开发人员，突然各种原因都来不了了，当时顿时有点手足无措的感觉。一心想走捷径，指望这些人之前的经验短时间复制一套他们之前做过的系统，现在都只能靠自己了，那个时候深深的感觉到靠什么都不如靠自己来得踏实，所谓的捷径都是自己一点一滴干出来的。于是重新梳理产品需求，重新设计，给大家做了简单地培训，发现团队里几个成员稍微培养下还挺不错，两周，自己和这个团队都找到了感觉，心情开始不那么焦虑了。</p>

<p>大方向定了，剩下的就是执行了，加班成了家常便饭，每天都觉得过得很漫长，一个月下来，感觉跟过了一年似得。期间还经历了公司搬家，还有各种其他事件的干扰，不过最后大家都撑过来了。当系统完成上线的那一刻，大大了送了一口气，不过更大的挑战紧接着就又来临了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业记一]]></title>
    <link href="http://ellios.github.com//blog/2014/07/06/startup1/"/>
    <updated>2014-07-06T21:31:00+08:00</updated>
    <id>http://ellios.github.com//blog/2014/07/06/startup1</id>
    <content type="html"><![CDATA[<p>收到了一家创业公司的橄榄枝，内心稍微挣扎了一下(主要是说服老婆)，很快就同意加入了。公司是做在线教育，目前大热的方向，和创始人聊得不错，自我感觉将来会很美好。</p>

<p>作为典型的技术工种，我担任了公司的技术总监，title挺唬人的，现实其实也是很唬人的，我要带着现有的14人的产品+技术团队，在一个半月之内把我们的一期产品上线。而当了解了整个产品需求和开发进度的时候，我立即认识到，除非找到合适的人，否则现有的团队在规定的时间点内把产品上线，几乎是不可能的。而我也终于明确了自己作为一个技术管理者的使命感，放下代码，拼命找人，开始不停的给之前的同事打电话，折腾了一个星期，招到了4个人，准确的说是给4个人发了offer，而他们真正入职，可能得1个月之后了（就连我也要到两周之后才能正式入职）那个时候，我们的产品只有半个月时间了，在这么短时间内做一个新产品出来，根本是不可能的。于是只能用创业公司的杀手锏了，加班和兼职。加班不用说了，上过班的都知道。兼职，对于那些还不能入职的同事，周末过来和我们联调，平时兼职开发，效率不好保证，不过也是现有情况下，唯一的办法了。</p>

<p>人员基本确认了，但是怎么带着将近20人（之前有两人发了offer，在我确认入伙后两天，他两也入职了）的团队把产品做上线，我还是一点底都没有。之前在奇艺我最多只带过6个人的团队，那个时候是纯粹的java团队，我可以把每个人的代码都review一遍，自己还有时间写些比较核心的模块。我不用太多去想产品，设计，运维这些东西，因为有专门的团队去做了，而现在，这些东西都要去考虑，买了些书去恶补这方面的知识，但是短时间内也很难入门。之前习惯了事必躬亲，每一件事情自己都要想清楚才会去做，而现在需要放手让别人去做了，自己很多时候只能旁观了。除了我招过来的几个人，之前的十多个个同事，我基本都不熟悉，找每个人都谈了一次，了解了下大家的情况，团队整体的情况不错，这给了我小小的信心。</p>

<p>周末把几个现在比较核心的和即将入职的同事召集到一起，重新过了一遍产品ui和现有的系统的数据结构，把整体的排期和工作安排定了下来。下周我决定提前过去了(本来还有一周才正式入职呢)，不过考虑到自己在奇艺的年假可以充分利用下，另外项目的压力还是蛮大的，能早点过去就早点过去吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devops]]></title>
    <link href="http://ellios.github.com//blog/2014/03/12/devops/"/>
    <updated>2014-03-12T10:12:00+08:00</updated>
    <id>http://ellios.github.com//blog/2014/03/12/devops</id>
    <content type="html"><![CDATA[<p>最近做的监控平台基本work起来了，后期就是完善文档，然后推动大家去用了。自己统计了下，发现来公司一年半，基本上有一半的时间都是在做运维的工作。能得到的运维支持太少了，没办法，很多事情只能赶鸭子上架自己来了。不过做完之后，还能挺有成就感的，自己也收获了不少，处理问题的能力有了很大的提升。</p>

<p>看下自己在公司做过的一些运维相关的工作</p>

<ul>
<li>基于jenkins搭建持续集成和自动化部署的平台</li>
<li>用ganglia对JVM和业务数据进行监控，ganglia画出来的图太难看，定制化也太麻烦，试用了一段时间没有推广了</li>
<li>试着用了下zabbix做监控，因为公司其他部门用这个比较多，看了下太复杂，放弃</li>
<li>试用了下fabric,自动化安装JDK,自动压缩清理日志，目前还是入门阶段的使用，没有太深入</li>
<li>做了一个zookeeper的监控界面，做的比较糙，能增删改查数据，目前满足我们开发的需求是够了</li>
<li>基于graphite搭建监控平台，graphite就是专业画图的，画的图超赞。而且周边的开源项目很多，目前我们用了jmxtrans做JMX的数据收集，基于logster做了定制开发，可以收集nginx日志数据以及业务产生的日志，用了leonardo做dashboard，用了seyren做报警</li>
<li>用了monit对进程进行监控，目前还是属于初级使用阶段</li>
<li>试用了supervisord,托管进程的运行，不过这个东西要用好的话得做大量的定制开发，暂时放弃吧</li>
<li>使用了saltstack，目前的观感不错，后续会继续深挖它的潜力，</li>
</ul>


<p>我这算是devops的alone mode吧，现在深刻觉得开发人员掌握一点运维技能还能很有必要的，另外会点python之类的脚本语言在运维的时候会有很大的优势，以后如果team招人的话，这会是一个很大的加分项。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reviewboard折腾二]]></title>
    <link href="http://ellios.github.com//blog/2014/02/10/reviewboard2/"/>
    <updated>2014-02-10T14:04:00+08:00</updated>
    <id>http://ellios.github.com//blog/2014/02/10/reviewboard2</id>
    <content type="html"><![CDATA[<p>最近因为兄弟团队的一次比较严重的故障，领导又开始强制要求code reivew了，并且要提交到reviewboard上。之前也有过类似的强制要求，我还写过篇日志<a href="http://ellios.me">《艰难的reviewboard折腾》</a>,但是应付完领导之后，整个团队没一个人主动提交review。对于code review这种事情，很难立刻见到成效，而且还会增加大家的负担，最好是能有一种长效机制，慢慢去培养大家的习惯,而且靠领导命令去推动，也违背了进行code review的初衷&#8211;学习和交流。</p>

<p>OK,废话说完，开始正题，目前的团队用eclipse和idea各占一半，用eclipse的可以用<a href="http://code.taobao.org/p/tao-reviewboard/wiki/index/">tao-reviewboard</a>，但是idea目前发现的各种插件，经测试都不可用。没办法，我们团队的同学自己造了一个，基于一个开源的项目https://code.google.com/p/reviewboard-plugin-for-idea/，我们修复了这个项目的一些bug，代码放在https://github.com/georgecao/reviewboard4idea。下面简单介绍下该插件的安装和使用</p>

<ol>
<li>下载编译好的<a href="http://pan.baidu.com/s/1sjpo1B3">jar包</a></li>
<li>打开idea，进入菜单 Settings->Plugins, 点击按钮Install plugin from disk,选择刚刚下载的jar包。下图是安装成功后的截图:
<img src="http://d.pcs.baidu.com/thumbnail/df938d976bd8937918952643d2da4783?fid=3107729884-250528-665226388&time=1392016876&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-2WbD%2FVQCB8iWTnQLWFd6C0%2FViR0%3D&expires=8h&prisign=amMwnVibYf88f2TB/V4FApSN5rJwOqzRhL6Now25HScufo4OuxITn8BmzguRNe+KOSvL1kr6vNdjxReTw2p4rao5rHOtKS4vAcdPT77uxjF528u8yMEWFMKCU55gdZOPF+eThF0cEZgTGgr9nQKeymOb5V3PMjZ+2dPQWYhaNwhe3cBnCv8SM4/fe9aSmqP0AC5A8VviSQvcyUtxR5NKO4GrqVf7hMnRM2HndBFijOIfpBR6e8d9Jg==&r=710409378&size=c850_u580&quality=100"></li>
<li>点击上图的Review Board,简单配置下.其中Server Url是reviewboard的url,如http://reviewboard.xx.com, Username是用户名，Password就是密码了</li>
<li>配置好后，简单修改一个文件，下方的Changes状态栏就会显示那个文件，如下图
<img src="http://d.pcs.baidu.com/thumbnail/980d476e409a19620022c8cf648cfc1a?fid=3107729884-250528-1912072506&time=1392016876&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-xExXlwKyJ86MzP8o8iobdkqouvM%3D&expires=8h&prisign=amMwnVibYf88f2TB/V4FApSN5rJwOqzRhL6Now25HScufo4OuxITn8BmzguRNe+KOSvL1kr6vNdjxReTw2p4rao5rHOtKS4vAcdPT77uxjF528u8yMEWFMKCU55gdZOPF+eThF0cEZgTGgr9nQKeymOb5V3PMjZ+2dPQWYhaNwhe3cBnCv8SM4/fe9aSmqP0AC5A8VviSQvcyUtxR5NKO4GrqVf7hMnRM2HndBFijOIfpBR6e8d9Jg==&r=580019057&size=c850_u580&quality=100"></li>
<li>右键点击该文件，选择PostReview菜单项，弹出Post Review对话框，如图
<img class="left" src="http://d.pcs.baidu.com/thumbnail/b1be648c81f86ed7a3d91cae2d31d468?fid=3107729884-250528-3564722414&time=1392018561&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-A0HfIewACfVi1qhjIoXQrDhd9sA%3D&expires=8h&prisign=amMwnVibYf88f2TB/V4FApSN5rJwOqzRhL6Now25HScufo4OuxITn8BmzguRNe+KOSvL1kr6vNdjxReTw2p4rao5rHOtKS4vAcdPT77uxjF528u8yMEWFMKCU55gdZOPF+eThF0cEZgTGgr9nQKeymOb5V3PMjZ+2dPQWYhaNwhe3cBnCv8SM4/fe9aSmqP0AC5A8VviSQvcyUtxR5NKO4GrqVf7hMnRM2HndBFijOKs24khuUUlhA==&r=744605154&size=c850_u580&quality=100" width="400" height="300">
其中 Summary:简短描述信息，Branch:代码分支一般是trunk吧，Bug:和bug相关的信息，比如Bug id等信息, Group:Review Board中的分组，多个分组用逗号分割,People：reviewers，需要谁来review，多个人用逗号分割,Description：这次提交的详细描述信息。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随想]]></title>
    <link href="http://ellios.github.com//blog/2013/12/06/random-thoughts/"/>
    <updated>2013-12-06T23:35:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/12/06/random-thoughts</id>
    <content type="html"><![CDATA[<p>转眼一年又快过去了，今年是目前参加工作以来最忙的一年，尤其是后半年，被各种产品需求和线上报障追着跑，连写个博客的时间都没有了，本来已经上手了的emacs，最近又都忘完了。现在是用sublime text写的，还是这个简单，不需要折腾一堆插件和记一堆的快捷键。</p>

<p>下半年基本上没接触什么新的技术，主要的精力都放在数据服务了，好在经过一年的推动，目前的数据服务已经基本稳定了，整个系统的服务化改造也基本完成了。最近把restful service相关的文章又重新看了下，之前对restful的理解还是太片面了，之后会推动我们的系统朝着真正的restful的方向发展，最近会写一些东西分享下我们做restful服务的心得。上周偷闲，终于把买了好久的树莓派给跑起来,之前一直觉得挺对不起它的，买来放了3,4个月连包装都没拆。之前一直想好好学学的lua, scala, hadoop, hbase更是一眼都没看过，希望过段时间能有时间把这些都好好看一遍。</p>

<p>虽然技术的收获不多，但是对于业务的理解这半年却加深了不少，能够独自和产品PK了。也开始学着做一些管理，手下有了两个小兵，虽然刚开始的时候有点不太习惯，脾气也比较急，基本上什么都是亲力亲为，但是最近也开始慢慢进入角色了，目前主要是通过每天的站例会议和code review的方式，团队的协作自我感觉还算不错。和其他部门同事的交往越来越多了，基本上跨部门的合作都会比较麻烦，这个我觉得需要一种艺术，目前我还不得要领，探索学习中吧。</p>

<p>上个月，经过李剑同学的提醒，发现偶用的手机竟然是移动版的3G手机，不支持联通3G，汗，用了半年了才知道。于是紧急花900又买了一个华为的G610U，上网快多了，顺便刷了一个miui系统玩，怪不得小米手机那么多人抢，miui做得确实挺舒服的。个人觉得android的手机现在和apple的用户体验的差距已经很小了，apple还得越狱，费半天劲，一般人真心没必要多花那么多钱买个apple。</p>

<p>很早就想学一些经济和金融的知识，觉得这东西挺重要的，但是一直不知道该怎么入门。前段时间上豆瓣买了本《白话金融投资》的电子书，居然让俺看懂了点，于是觉得看书这方式也挺靠谱，上豆瓣找了一堆经济和金融的书先看着，权当入门吧，计划春节前能把买得7，8本书全部看完，我要好好学习啦。</p>

<p>晶晶已经2岁半多了，也越来越可爱了，小家伙太爱说话，跟她妈一个性格，说起话来不带停的，不过有时间你听半天也听不明白她说啥。每次晚上加完班，走在路上，想想晶晶和晶晶她妈，心里就可满足了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia python]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-python/"/>
    <updated>2013-04-16T23:30:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-python</id>
    <content type="html"><![CDATA[<p>老大想把我们放在mongdodb的一些统计数据，在Ganglia展示出来，想到Ganglia支持用python来写扩展模块，于是欣然应下，正好也学习下怎么写Ganglia的python扩展模块。</p>

<p>Ganglia要集成python模块是非常容易的，简单的数据展示，只需要写个pyconf后缀的文件和一个python的脚本就好了。Ganglia自身的源码里面也有很多python的模块的源码，其中有一个是专门用来做示例用的，我们就从他开始吧。</p>

<p>首先要弄清楚你需要收集哪些各数据，在pyconf文件中配置你要收集的数据的名称，像下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">modules</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">module</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;example&quot;</span>
</span><span class='line'>    <span class="nx">language</span> <span class="o">=</span> <span class="s2">&quot;python&quot;</span>
</span><span class='line'>    <span class="nx">enabled</span> <span class="o">=</span> <span class="s2">&quot;yes&quot;</span>
</span><span class='line'>    <span class="nx">param</span> <span class="nx">RandomMax</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="mi">600</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">param</span> <span class="nx">ConstantValue</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">=</span> <span class="mi">112</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">collection_group</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">collect_every</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nx">time_threshold</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>  <span class="nx">metric</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;PyRandom_Numbers&quot;</span>
</span><span class='line'>    <span class="nx">value_threshold</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">collection_group</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">collect_once</span> <span class="o">=</span> <span class="nx">yes</span>
</span><span class='line'>  <span class="nx">time_threshold</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="nx">metric</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;PyConstant_Number&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单，modules里面配置了要加载的模块的名称，具体的配置项这里就不纠结了，collection_group里面可以配置你要收集的数据，metric项就是了。</p>

<p>配置文件写好了，下面看看真真干活的模块吧，ganglia的python模块是有一定的规范的，每个模块必要要有 metric_init, metric_cleanup方法，metric_cleanup做些收尾的工作，当gmond关闭时释放资源。metric_init方法做初始化操作，gmond在加载模块时，会先调用metric_init方法。这里你需要定义要收集的数据的详细参数，以及数据的call_back方法。具体看下面吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="n">descriptors</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="n">Random_Max</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="n">Constant_Value</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Random_Numbers</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Return a random number.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">Random_Max</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">Constant_Number</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Return a constant number.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">Constant_Value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">metric_init</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Initialize the random number generator and create the</span>
</span><span class='line'><span class="sd">    metric definition dictionary object for each metric.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">descriptors</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">Random_Max</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">Constant_Value</span>
</span><span class='line'>    <span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;[pyexample] Received the following parameters&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">params</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;RandomMax&#39;</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
</span><span class='line'>        <span class="n">Random_Max</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;RandomMax&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;ConstantValue&#39;</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
</span><span class='line'>        <span class="n">Constant_Value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;ConstantValue&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;PyRandom_Numbers&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;call_back&#39;</span><span class="p">:</span> <span class="n">Random_Numbers</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;time_max&#39;</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;value_type&#39;</span><span class="p">:</span> <span class="s">&#39;uint&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="s">&#39;N&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;slope&#39;</span><span class="p">:</span> <span class="s">&#39;both&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;</span><span class="si">%u</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;Example module metric (random numbers)&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;groups&#39;</span><span class="p">:</span> <span class="s">&#39;example,random&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d2</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;PyConstant_Number&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;call_back&#39;</span><span class="p">:</span> <span class="n">Constant_Number</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;time_max&#39;</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;value_type&#39;</span><span class="p">:</span> <span class="s">&#39;uint&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;units&#39;</span><span class="p">:</span> <span class="s">&#39;N&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;slope&#39;</span><span class="p">:</span> <span class="s">&#39;zero&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;format&#39;</span><span class="p">:</span> <span class="s">&#39;</span><span class="si">%hu</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">&#39;Example module metric (constant number)&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">descriptors</span> <span class="o">=</span> <span class="p">[</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">descriptors</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">metric_cleanup</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Clean up the metric module.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="c">#This code is for debugging and unit testing</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;RandomMax&#39;</span><span class="p">:</span> <span class="s">&#39;500&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;ConstantValue&#39;</span><span class="p">:</span> <span class="s">&#39;322&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">metric_init</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">descriptors</span><span class="p">:</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="s">&#39;call_back&#39;</span><span class="p">](</span><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;value for </span><span class="si">%s</span><span class="s"> is </span><span class="si">%u</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span>  <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他还需要做些简单的配置，不过看下gmond.conf的配置文件基本上就都搞好了。这里就不啰嗦了，这两天感冒的厉害，需要好好休息。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920025573.do">Monitoring with Ganglia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia整合java]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-java/"/>
    <updated>2013-04-16T22:09:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-java</id>
    <content type="html"><![CDATA[<p>前段时间简单介绍了Ganglia的安装和配置，现在我们的Ganglia已经跑了起来，并且已经可以展示机器的负载，
网络，io等各种数据，但是光有机器的情况还是远远不够，我们还需要了解每个应用的运行情况。针对一些常见的应用如：Mysql，Memcached，Redis，Nginx等，Ganglia的github上有很多开源的模块，大家可以自己折腾，要是有时间，后面也会简单简介绍下。这里主要介绍下怎么用Ganglia来收集和展示Java的数据，包括JVM的运行数据和业务数据。</p>

<h4>获取JMX数据</h4>

<p>JVM的运行数据我们是从JMX获得的，其实业务数据也可以写进JMX里，所以如果你的Java应用开启了JMX的话，基本上各种数据都可以从JMX中获得了。获取JMX数据的包Ganglia的网站已经有了，叫<a href="https://github.com/ganglia/jmxetric">jmxetric</a>。要使用它，需要再jvm参数里加入如下的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>-javaagent:jmxetric-1.0.3.jar<span class="o">=</span><span class="nv">host</span><span class="o">=</span>xxx,port<span class="o">=</span>xxx,mode<span class="o">=</span>unicast,wireformat31x<span class="o">=</span><span class="nb">true</span>,config<span class="o">=</span>jmxetric.xml
</span></code></pre></td></tr></table></div></figure>


<p>host是接收数据gmond的host，port是gmond的端口，mode有multicast和unicast两种，由于网络原因，我们使用的是unicast（单播），wireformat31x这个不清楚，一直都是true来着。前面几项配置都可以写到jmxetric.xml里面，不过为了方便控制这些参数，放到了外面。jmxetric.xml里面写需要获取的JMX的数据项，jmxetric的站点上有各详细的示例，这个不不再占用空间了。</p>

<p>一些注意的地方:
1. jmxetric.jar还依赖与gmetric4j.jar和oncrpc.jar，所以如果是直接下载jar包的话，要把依赖的jar包也都下到，而且要和jmxetric.jar在一个目录下。我们的项目是用maven管理的，直接加如下的依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>info.ganglia.jmxetric<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jmxetric<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>记得开启JMX哦</li>
</ol>


<h4>直接发送数据</h4>

<p>如果觉得从JMX获取数据麻烦的话，或者你不想开启JMX，你也可以直接发送数据到gmond。这个也有了现成的包gmetric4j，其实jmxetric也是利用他来发送数据的。这个没啥好说的，就是利用包提供的api发送数据就好了。
写了一个工具类，对原生的api做了简单的封装。最近看了下yammer开源的metrics，很强大，有兴趣的可以看下它的源码。</p>

<figure class='code'><figcaption><span>Ganglia Monitor Util MonitorUtil.java   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetric</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetricSlope</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetricType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GangliaException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.lang.StringUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MonitorUtil</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MonitorUtil</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">HedwigConfig</span> <span class="n">HC</span> <span class="o">=</span> <span class="n">HedwigConfig</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GMetricHOlder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">static</span> <span class="n">String</span> <span class="n">GANGLIA_HOST</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;ganglia.host&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">GANGLIA_PORT</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;ganglia.port&quot;</span><span class="o">,</span> <span class="mi">7649</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">GANGLIA_TTL</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;ganglia.ttl&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">GANGLIA_HOST</span><span class="o">)){</span>
</span><span class='line'>                <span class="n">GANGLIA_HOST</span> <span class="o">=</span> <span class="n">NetworkUtils</span><span class="o">.</span><span class="na">getEth0Address</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] begin to init gmetric&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_HOST : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_HOST</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_PORT : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_PORT</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_TTL : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_TTL</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kd">static</span> <span class="n">GMetric</span> <span class="n">G_METRIC</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GMetric</span><span class="o">(</span><span class="n">GANGLIA_HOST</span><span class="o">,</span> <span class="n">GANGLIA_PORT</span><span class="o">,</span>
</span><span class='line'>                <span class="n">GMetric</span><span class="o">.</span><span class="na">UDPAddressingMode</span><span class="o">.</span><span class="na">UNICAST</span><span class="o">,</span> <span class="n">GANGLIA_TTL</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">GMetric</span> <span class="nf">getGMetric</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GMetricHOlder</span><span class="o">.</span><span class="na">G_METRIC</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * monitor a metric</span>
</span><span class='line'><span class="cm">     * @param name Name of the metric</span>
</span><span class='line'><span class="cm">     * @param value Value of the metric</span>
</span><span class='line'><span class="cm">     * @param type Type of the metric.  </span>
</span><span class='line'><span class="cm">     *        Either string|int8|uint8|int16|uint16|int32|uint32|float|double</span>
</span><span class='line'><span class="cm">     * @param units Unit of measure for the value</span>
</span><span class='line'><span class="cm">     * @param slope Either zero|positive|negative|both</span>
</span><span class='line'><span class="cm">     * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span> <span class="n">type</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">String</span> <span class="n">units</span><span class="o">,</span>  <span class="n">GMetricSlope</span> <span class="n">slope</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GMetric</span> <span class="n">gm</span> <span class="o">=</span> <span class="n">getGMetric</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">gm</span><span class="o">.</span><span class="na">announce</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">units</span><span class="o">,</span> <span class="n">slope</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span>  <span class="n">group</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GangliaException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;monitor fail. name : {}, value:{}, error:{}&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * monitor a metric</span>
</span><span class='line'><span class="cm">     * @param name Name of the metric</span>
</span><span class='line'><span class="cm">     * @param value Value of the metric</span>
</span><span class='line'><span class="cm">     * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">BOTH</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * monitor a positive metric</span>
</span><span class='line'><span class="cm">     * @param name Name of the metric</span>
</span><span class='line'><span class="cm">     * @param value Value of the metric</span>
</span><span class='line'><span class="cm">     * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">counter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">POSITIVE</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * monitor a metric</span>
</span><span class='line'><span class="cm">     * @param name Name of the metric</span>
</span><span class='line'><span class="cm">     * @param value Value of the metric</span>
</span><span class='line'><span class="cm">     * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Float</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">value</span><span class="o">),</span><span class="n">GMetricType</span><span class="o">.</span><span class="na">DOUBLE</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">BOTH</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * monitor a positive metric</span>
</span><span class='line'><span class="cm">     * @param name Name of the metric</span>
</span><span class='line'><span class="cm">     * @param value Value of the metric</span>
</span><span class='line'><span class="cm">     * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">counter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Float</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">value</span><span class="o">),</span><span class="n">GMetricType</span><span class="o">.</span><span class="na">FLOAT</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">POSITIVE</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考资料</h3>

<ul>
<li><a href="https://github.com/ganglia/jmxetric">https://github.com/ganglia/jmxetric</a></li>
<li><a href="https://github.com/ganglia/gmetric4j">https://github.com/ganglia/gmetric4j</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia]]></title>
    <link href="http://ellios.github.com//blog/2013/03/12/ganglia/"/>
    <updated>2013-03-12T23:38:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/03/12/ganglia</id>
    <content type="html"><![CDATA[<p>最近忙的一个项目，终于上线了，忙了一个多月，但是心里仍然很没谱。为什么没谱，主要是因为目前的系统缺乏有效的监控，对于机器负载，jvm的运行情况，各接口的调用次数，接口的调用时间。于是痛下决心，利用系统刚上线，空余的一周搭建一套监控系统。</p>

<p>之前做运维的工作很少，对于各种监控系统更是缺乏有效的了解，了解到的一些常用监控系统有catti，zabbix和ganglia，考虑再三选择了ganglia。为什么选择ganglia呢，理由没那么充分，可能之前看过ganglia的一些资料，对他更为熟悉，对于他出身Berkley和支持python，这两点都比较满意，于是就选择它了。</p>

<p>选型之后就开始折腾了，相关的资料不多，很多的配置都是试着来，期间走了很多的弯路，本来预计两天搞定的事情，其实用了一周多。直接导致本周计划的持续集成环境的搭建没时间搞了。这里简单记录下安装过程。</p>

<h3>相关简介</h3>

<p><a href="http://ganglia.info/">Ganglia</a>是UC Berkley发起的一个开源项目，可以用来监控数以千记的服务器集群，具有很好的扩展性。Ganglia主要包括三个部分
1. Gmond，运行在每台目标机器节点上，用于获取节点的监控数据，gmond不仅能够收集本节点的数据，还能接收其他节点发来的数据，对数据做汇集后发送到gmetad，这样就可以保证整个监控系统的可扩展性；
2. Gemtad，将各gmond的数据收集到一起，用rrdtool将数据保存到硬盘上
3. Web Front， 将rrdtool生成的数据输出可视化的图片</p>

<p>简单介绍下rrdtool（Round Robin Database Tool）
rrdtool是一种环状结构的数据库，非常适合处理时间序列的数据，能够非常高效的绘制时间序列的图片。ganglia的数据存储和可视化都是通过rrdtool实现的。</p>

<h3>安装</h3>

<h4>Ubuntu安装</h4>

<p>Ubuntu下用apt-get会自动把相关的依赖都给安装上，执行下面的命令</p>

<pre><code>```sh
sudo apt-get install ganglia-monitor ganglia-webfrontend
```
</code></pre>

<h4>rh5编译安装</h4>

<ol>
<li>安装依赖的库</li>
</ol>


<p>先用yum把相关的依赖都安装上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum -y install apr-devel apr-util check-devel cairo-devel pango-devel <span class="se">\</span>
</span><span class='line'>libxml2-devel rpmbuild glib2-devel dbus-devel freetype-devel fontconfig-devel <span class="se">\</span>
</span><span class='line'>gcc-c++ expat-devel python-devel libXrender-devel libconfuse
</span></code></pre></td></tr></table></div></figure>


<p>虽然列出来好多，但是绝大多数都是一些常见的基础包，需要注意的就是expat和libconfuse</p>

<ol>
<li>编译安装rrdtool，执行下面的命令</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://oss.oetiker.ch/rrdtool/pub/rrdtool.tar.gz
</span><span class='line'>tar zxvf rrdtool*
</span><span class='line'><span class="nb">cd </span>rrdtool-*
</span><span class='line'>./configure --prefix<span class="o">=</span>/data/apps/rrdtool
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>编译安装ganglia</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">&quot;$CPPFLAGS -I/opt/apps/rrdtool&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&quot;$LDFLAGS -L/opt/apps/rrdtool&quot;</span>
</span><span class='line'>tar –zxvf ganglia-3.1.2.tar.gz
</span><span class='line'><span class="nb">cd </span>ganglia-3.1.2.tar.gz
</span><span class='line'>./configure --prefix<span class="o">=</span>/data/apps/ganglia --with-gmetad
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>4.将编译好的ganglia发布到客户端
首先在目标机器上建立ssh信任，然后执行下面的脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">GANGLIA_BIN</span><span class="o">=</span>/data/apps/ganglia/bin
</span><span class='line'><span class="nv">GANGLIA_SBIN</span><span class="o">=</span>/data/apps/ganglia/sbin
</span><span class='line'><span class="nv">GANGLIA_LIB</span><span class="o">=</span>/data/apps/ganglia/lib64
</span><span class='line'><span class="nv">i</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p <span class="nv">$GANGLIA_BIN</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p <span class="nv">$GANGLIA_SBIN</span>
</span><span class='line'>scp <span class="nv">$GANGLIA_BIN</span>/gmetric <span class="nv">$i</span>:<span class="nv">$GANGLIA_BIN</span>
</span><span class='line'>scp <span class="k">${</span><span class="nv">GANGLIA_SBIN</span><span class="k">}</span>/gmond <span class="nv">$i</span>:<span class="k">${</span><span class="nv">GANGLIA_SBIN</span><span class="k">}</span>/gmond
</span><span class='line'>ssh <span class="nv">$i</span> ln -fs <span class="nv">$GANGLIA_SBIN</span>/gmond /usr/sbin/gmond
</span><span class='line'>scp -r <span class="nv">$GANGLIA_LIB</span> <span class="nv">$i</span>:<span class="nv">$GANGLIA_LIB</span>
</span><span class='line'>ssh <span class="nv">$i</span> mkdir -p /etc/ganglia/
</span><span class='line'>scp gmond.conf <span class="nv">$i</span>:/etc/ganglia/gmond.conf
</span><span class='line'>scp /etc/init.d/gmond <span class="nv">$i</span>:/etc/init.d/
</span><span class='line'>scp /lib64/libexpat.so.0 <span class="nv">$i</span>:/lib64/
</span><span class='line'>scp /usr/lib64/libconfuse.so.0 <span class="nv">$i</span>:/usr/lib64/
</span><span class='line'>scp /usr/lib64/libapr-1.so.0 <span class="nv">$i</span>:/usr/lib64/
</span><span class='line'>ssh <span class="nv">$i</span> chkconfig --add gmond
</span><span class='line'>ssh <span class="nv">$i</span> chkconfig gmond on
</span><span class='line'>ssh <span class="nv">$i</span> service gmond start
</span></code></pre></td></tr></table></div></figure>


<p>5.搭建Http Server
ganglia的Web界面是用php写的，所以支持php的http server是必须的。这个没啥好说的，php和各种http Server集成的方法还是
挺多的，我用的最经典的Apache+php_module的方式。</p>

<h3>配置</h3>

<p>对应于组成ganglia的三种组件，ganglia的配置也需要对这三种组件分别做配置</p>

<ol>
<li>Web Front的配置
Web Front的配置文件是web项目下的conf.php文件，新版的web项目可能没有这个文件，自己建一个就好了，默认是先从conf.php加载不到，如果
没有的话，就从conf_default.php加载。可以通过这个文件对web项目做些简单的定制。下面是我的配置文件。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$conf[&#39;gmetad_root&#39;] = &quot;/data/appdata/ganglia&quot;;</span>
</span><span class='line'><span class="x">$conf[&#39;rrds&#39;] = &quot;${conf[&#39;gmetad_root&#39;]}/rrds&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Gmetad的配置
Gmetad的配置文件默认是/etc/ganglia/gmetad.conf，编译的时候可以自己指定配置文件的位置在configure加&#8211;sysconfdir=xx.这个文件里面
最重要的配置项是data_source，下面是我的一个简要的配置</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">data_source &quot;monitor&quot; xx.xx.xx.xx:8649</span>
</span><span class='line'><span class="x">data_source &quot;test&quot; xx.xx.xx.xx:8649</span>
</span><span class='line'><span class="x">rrd_rootdir &quot;/data/appdata/ganglia/rrds&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Gmond的配置
Gmond是真正干活的，由于没弄明白它的配置，期间犯了好多低级错误。Gmond的默认数据收集的方式有组播和单播两种，默认是组播，组播的好处是配置非常简单，
但是对网络的可适应要差些。我们的机器由于有跨机房的问题，所以用的是单播的方式。</li>
</ol>


<p>生成默认的gmond配置文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gmond --default_config &gt; /etc/ganglia/gmond.conf
</span></code></pre></td></tr></table></div></figure>


<p>我的配置文件的示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">globals {</span>
</span><span class='line'><span class="x">  daemonize = yes</span>
</span><span class='line'><span class="x">  setuid = yes</span>
</span><span class='line'><span class="x">  user = nobody</span>
</span><span class='line'><span class="x">  debug_level = 0</span>
</span><span class='line'><span class="x">  max_udp_msg_len = 1472</span>
</span><span class='line'><span class="x">  mute = no</span>
</span><span class='line'><span class="x">  deaf = no</span>
</span><span class='line'><span class="x">  allow_extra_data = yes</span>
</span><span class='line'><span class="x">  host_dmax = 86400 /*secs. Expires (removes from web interface) hosts in 1 day */</span>
</span><span class='line'><span class="x">  host_tmax = 20 /*secs */</span>
</span><span class='line'><span class="x">  cleanup_threshold = 300 /*secs */</span>
</span><span class='line'><span class="x">  gexec = no</span>
</span><span class='line'><span class="x">  send_metadata_interval = 120 /*secs */</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">cluster {</span>
</span><span class='line'><span class="x">  name = &quot;cluster&quot; /*这个字段是集群的名称，对应gmetad的data_source的名称 */</span>
</span><span class='line'><span class="x">  owner = &quot;&quot;</span>
</span><span class='line'><span class="x">  latlong = &quot;unspecified&quot;</span>
</span><span class='line'><span class="x">  url = &quot;&quot;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">host {</span>
</span><span class='line'><span class="x">  location = &quot;unspecified&quot;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">udp_send_channel {</span>
</span><span class='line'><span class="x">  host = xx.xx.xx.xx</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">  ttl = 1</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">udp_recv_channel {</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">  bind = yy.yy.yy.yy</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">tcp_accept_channel {</span>
</span><span class='line'><span class="x">  port = 7649</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>遇到的一些问题</h3>

<ol>
<li>gmond会把一些错误日志打到系统日志里面，如果有问题可以关注下系统日志</li>
<li>gmond -d 10可以打出debug信息</li>
</ol>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.imxylz.info/wiki/Ganglia/Ganglia">http://www.imxylz.info/wiki/Ganglia/Ganglia</a></li>
<li><a href="http://www.howtocn.org/ganglia_how_to">http://www.howtocn.org/ganglia_how_to</a></li>
<li><a href="http://sourceforge.net/apps/trac/ganglia/wiki">http://sourceforge.net/apps/trac/ganglia/wiki</a></li>
<li><a href="">http://ganglia.info/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vrs hedwig入门]]></title>
    <link href="http://ellios.github.com//blog/2012/11/14/vrs-hedwig-tutorial/"/>
    <updated>2012-11-14T21:13:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/11/14/vrs-hedwig-tutorial</id>
    <content type="html"><![CDATA[<p>hedwig（Harry Potter&#8217;s owl. A messager.）是一个分布式服务的框架，用户使用它可以很方便的开发分布式服务，并使用这些服务。它主要有以下功能：</p>

<ul>
<li>统一的服务注册中心</li>
<li>统一的服务管理平台</li>
<li>统一的服务监控平台</li>
<li>使用protocol buffer或者thrift作为消息格式，支持多种语言调用。</li>
<li>服务可动态扩展</li>
<li>负载均衡</li>
<li>服务的容错容灾</li>
</ul>


<p>下面对hedwig的使用做一个简单的入门介绍.</p>

<p>hedwig支持[protocol buffer]和<a href="http://thrift.apache.org/">thrift</a>作为消息格式，两种格式的服务开发和调用略有不同，下面分别讲述。</p>

<h3>Protocol bufffe服务</h3>

<h4>服务Provider</h4>

<ol>
<li>定义消息格式</li>
</ol>


<figure class='code'><figcaption><span>example.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">pb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span> <span class="n">java_package</span> <span class="o">=</span> <span class="s">&quot;com.qiyi.vrs.hedwig.examples.pb&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">option</span> <span class="n">java_outer_classname</span> <span class="o">=</span> <span class="s">&quot;Calculator&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">CalcRequest</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">Operation</span> <span class="n">op</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>      <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">CalcResponse</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">int32</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>使用protoc生成代码</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --java_out<span class="o">=</span>../java example.proto
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>定义服务接口</li>
</ol>


<figure class='code'><figcaption><span>CalculatorService.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CalculatorService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>实现服务</li>
</ol>


<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorServiceImpl</span> <span class="kd">implements</span> <span class="n">CalculatorService</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span> <span class="nf">calculate</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getNum1</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getNum2</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">Operation</span> <span class="n">op</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getOp</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;calculate(, {&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">ADD:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SUBTRACT:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">-</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">MULTIPLY:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">DIVIDE:</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;num2 is zero for divide operation&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">/</span> <span class="n">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;unknown operation&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setResult</span><span class="o">(</span><span class="n">val</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>启动服务，服务启动时会自动在服务中心注册</li>
</ol>


<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PbCalServer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">HedwigServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HedwigServer</span><span class="o">.</span><span class="na">getServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">registerService</span><span class="o">(</span><span class="n">ServiceConfigFactory</span><span class="o">.</span><span class="na">createServiceConfig</span><span class="o">(</span><span class="n">CalculatorService</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">CalculatorServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>服务调用</h4>

<p>调用服务前你需要获取服务的接口类和接口名称，然后就可以调用服务了。</p>

<figure class='code'><figcaption><span>CalculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PbCalClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">CalculatorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ServiceHelper</span><span class="o">.</span><span class="na">getPbService</span><span class="o">(</span><span class="n">CalculatorService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setNum1</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">setNum2</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">setOp</span><span class="o">(</span><span class="n">Calculator</span><span class="o">.</span><span class="na">CalcRequest</span><span class="o">.</span><span class="na">Operation</span><span class="o">.</span><span class="na">ADD</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thrift服务</h3>

<h4>Thrift服务Provider</h4>

<p>一. 定义服务接口</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* example.thrift</span>
</span><span class='line'><span class="cm">* show how to use thrift rpc</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">thrift</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">py</span> <span class="n">com</span><span class="p">.</span><span class="n">qiyi</span><span class="p">.</span><span class="n">vrs</span><span class="p">.</span><span class="n">hedwig</span><span class="p">.</span><span class="n">examples</span><span class="p">.</span><span class="n">thrift</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">exception</span> <span class="n">InvalidOperation</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">:</span> <span class="n">i32</span> <span class="n">what</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">:</span> <span class="n">string</span> <span class="n">why</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">Calculator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">i32</span> <span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">i32</span> <span class="n">num1</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="n">i32</span> <span class="n">num2</span><span class="p">,</span> <span class="mi">3</span><span class="o">:</span><span class="n">Operation</span> <span class="n">op</span><span class="p">)</span> <span class="n">throws</span> <span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">InvalidOperation</span> <span class="n">ouch</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>二. 生成代码，thrift提供了代码生成工具，执行下面的命令生成java代码</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">thrift</span> <span class="o">-</span><span class="n">gen</span> <span class="n">java</span> <span class="o">-</span><span class="n">out</span> <span class="p">..</span><span class="o">/</span><span class="n">java</span> <span class="n">exmaple</span><span class="p">.</span><span class="n">thrift</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>实现服务</li>
</ol>


<p>thrift的代码生成工具会自动生成接口类，直接实现接口就可以了</p>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">CalculatorServiceImpl</span> <span class="n">implements</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="n">Override</span>
</span><span class='line'>    <span class="n">public</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">,</span> <span class="n">Operation</span> <span class="n">op</span><span class="p">)</span> <span class="n">throws</span> <span class="n">InvalidOperation</span><span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;calculate({&quot;</span> <span class="o">+</span> <span class="n">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">ADD</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">SUBTRACT</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">-</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">MULTIPLY</span>:
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">DIVIDE</span>:
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="n">new</span> <span class="n">InvalidOperation</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="p">.</span><span class="n">what</span> <span class="o">=</span> <span class="n">op</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="p">.</span><span class="n">why</span> <span class="o">=</span> <span class="s">&quot;Cannot divide by 0&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">throw</span> <span class="n">io</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">/</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="nl">default:</span>
</span><span class='line'>                <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="n">new</span> <span class="n">InvalidOperation</span><span class="p">();</span>
</span><span class='line'>                <span class="n">io</span><span class="p">.</span><span class="n">what</span> <span class="o">=</span> <span class="n">op</span><span class="p">.</span><span class="n">getValue</span><span class="p">();</span>
</span><span class='line'>                <span class="n">io</span><span class="p">.</span><span class="n">why</span> <span class="o">=</span> <span class="s">&quot;Unknown operation&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="n">throw</span> <span class="n">io</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>启动服务</li>
</ol>


<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">ThriftCalServer</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">...</span> <span class="n">args</span><span class="p">){</span>
</span><span class='line'>        <span class="n">HedwigServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">HedwigServer</span><span class="p">.</span><span class="n">getServer</span><span class="p">();</span>
</span><span class='line'>        <span class="n">server</span><span class="p">.</span><span class="n">registerService</span><span class="p">(</span><span class="n">ServiceConfigFactory</span><span class="p">.</span><span class="n">createServiceConfig</span><span class="p">(</span><span class="s">&quot;ThriftCalculatorService&quot;</span><span class="p">,</span> <span class="mi">8886</span><span class="p">,</span>
</span><span class='line'>                <span class="n">ServiceConfig</span><span class="p">.</span><span class="n">ServiceSchema</span><span class="p">.</span><span class="n">TCP</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">ServiceConfig</span><span class="p">.</span><span class="n">ServiceType</span><span class="p">.</span><span class="n">THRIFT</span><span class="p">,</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>                <span class="n">CalculatorServiceImpl</span><span class="p">.</span><span class="n">class</span><span class="p">));</span>
</span><span class='line'>        <span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>thrift服务调用</h4>

<figure class='code'><figcaption><span>example.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">ThriftCalClient</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">...</span> <span class="n">args</span><span class="p">)</span> <span class="n">throws</span> <span class="n">TException</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ServiceHelper</span><span class="p">.</span><span class="n">getThriftService</span><span class="p">(</span><span class="s">&quot;ThriftCalculatorService&quot;</span><span class="p">,</span> <span class="n">Calculator</span><span class="p">.</span><span class="n">Iface</span><span class="p">.</span><span class="n">class</span><span class="p">);</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">service</span><span class="p">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="n">Operation</span><span class="p">.</span><span class="n">ADD</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<ol>
<li>服务端支持spring,需要在配置文件hedwig.properties中填加如下内容</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hedwig.spring.enable<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>hedwig.spring.config<span class="o">=</span>spring/vrs_all.xml
</span></code></pre></td></tr></table></div></figure>


<p>hedwig.spring.config可不填，默认会从META-INf/spring/下读取所有的配置文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zookeeper入门]]></title>
    <link href="http://ellios.github.com//blog/2012/11/11/zookeeper-tutorial/"/>
    <updated>2012-11-11T13:39:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/11/11/zookeeper-tutorial</id>
    <content type="html"><![CDATA[<h3>What is Zookeeper</h3>

<p>ZooKeeper is a high-performance <strong>coordination</strong> service for <strong>distributed</strong> applications. It exposes common services - such as <strong>naming</strong>, <strong>configuration management</strong>, <strong>synchronization</strong>, and <strong>group services</strong> - in a simple interface so you don&#8217;t have to write them from scratch. You can use it off-the-shelf to implement <strong>consensus</strong>, <strong>group management</strong>, <strong>leader election</strong>, and <strong>presence protocols</strong>.</p>

<p>Zookeeper提供了如下的一致性保证：</p>

<ol>
<li>顺序一致性。客户端的更新顺序与它们被发送的顺序相一致。</li>
<li>原子性。更新操作要么成功要么失败，不会更新半拉。</li>
<li>单系统镜像。无论客户端连接到哪一个服务器，客户端将看到相同的 ZooKeeper 视图。</li>
<li>可靠性。一旦一个更新操作被应用，那么在客户端再次更新它之前，它的值将不会改变。</li>
<li>实时性。在特定的一段时间内，客户端能够得到数据变化的通知</li>
</ol>


<h3>Name Space</h3>

<p><img src="http://zookeeper.apache.org/doc/r3.4.4/images/zknamespace.jpg" alt="ZooKeeper's Hierarchical Namespace" /></p>

<p>如图所示，zookeeper的命令空间是一个树状结构，类似于文件系统。树中的每个节点对应一个znode。</p>

<h4>Znode</h4>

<ol>
<li>znode通过路径来唯一标识</li>
<li>znode有分为<strong>PERSISTENT</strong>和<strong>EPHEMERAL</strong>(EPHEMERAL的生命周期依赖于client session，对应session close/expire后其znode也会消失)</li>
<li>znode的数据读写是原子的</li>
<li>znode的数据数据结构

<ul>
<li>czxid : The zxid of the change that caused this znode to be created.</li>
<li>mzxid : The zxid of the change that last modified this znode.</li>
<li>ctime : The time in milliseconds from epoch when this znode was created.</li>
<li>mtime : The time in milliseconds from epoch when this znode was last modified.</li>
<li>version : The number of changes to the data of this znode.</li>
<li>cversion : The number of changes to the children of this znode.</li>
<li>aversion : The number of changes to the ACL of this znode.</li>
<li>ephemeralOwner : The session id of the owner of this znode if the znode is an ephemeral node. If it is not an ephemeral node, it will be zero.</li>
<li>dataLength : The length of the data field of this znode.</li>
<li>numChildren : The number of children of this znode.</li>
</ul>
</li>
<li>zonde的数据大小是有限制的，默认最大是1M，可以通过修改环境变量jute.maxbuffer来设置</li>
</ol>


<h3>Zookeeper Cluster</h3>

<p><img src="http://zookeeper.apache.org/doc/r3.4.4/images/zkservice.jpg" alt="Zookeeper Cluster" /></p>

<p>Zookeeper中的每个节点都在内存中有个一份所有数据的副本。</p>

<h4>角色</h4>

<p>Zookeeper集群中，每个节点担任下面的一种角色。</p>

<ul>
<li>leader：集群的管理者（数据同步，数据更新提议），通过paxos算法选举出来的</li>
<li>follower：参与投票，在leader出问题时，可以被选举为follower</li>
<li>observer：定时从leader同步数据，提高系统的读性能

<h4>Paxos</h4>

<p><a href="http://en.wikipedia.org/wiki/Paxos_algorithm">Paxos</a>是一种分布式一致性算法，是zookeeper保证数据一致性的基础。网上关于paxos的内容还挺多的，有兴趣的自行找吧。</p></li>
</ul>


<h3>Zookeeoer的应用</h3>

<ul>
<li>Leader Election</li>
<li>Group Membership</li>
<li>Configuration Management</li>
<li>Cluster Management</li>
<li>分布式锁</li>
<li>分布式队列</li>
</ul>


<h3>实践</h3>

<p>Zookeeper自身提供的接口比较麻烦，网上有很多开源的zookeeper client的封装实现，目前用了netflix出的curator，这里<a href="https://github.com/Netflix/curator/tree/master/curator-examples">examples</a>有一些例子，有兴趣的可以看下。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/2318">http://rdc.taobao.com/team/jm/archives/2318</a></li>
<li><a href="http://zookeeper.apache.org/doc/r3.4.4/zookeeperAdmin.html">http://zookeeper.apache.org/doc/r3.4.4/zookeeperAdmin.html</a></li>
<li><a href="http://www.searchtb.com/2011/01/zookeeper-research.html">http://www.searchtb.com/2011/01/zookeeper-research.html</a></li>
<li><a href="http://en.wikipedia.org/wiki/Paxos_algorithm">http://en.wikipedia.org/wiki/Paxos_algorithm</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/448">http://rdc.taobao.com/team/jm/archives/448</a></li>
<li><a href="http://rdc.taobao.com/blog/cs/?p=162">http://rdc.taobao.com/blog/cs/?p=162</a></li>
<li><a href="http://agapple.iteye.com/blog/1292473">http://agapple.iteye.com/blog/1292473</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/665">http://rdc.taobao.com/team/jm/archives/665</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/947">http://rdc.taobao.com/team/jm/archives/947</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1070">http://rdc.taobao.com/team/jm/archives/1070</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1232">http://rdc.taobao.com/team/jm/archives/1232</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1241">http://rdc.taobao.com/team/jm/archives/1241</a></li>
<li><a href="http://rdc.taobao.com/team/jm/archives/1384">http://rdc.taobao.com/team/jm/archives/1384</a></li>
<li><a href="http://www.spnguru.com/2010/08/zookeeper%E5%85%A8%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94paxos%E7%9A%84%E7%81%B5%E9%AD%82/">http://www.spnguru.com/2010/08/zookeeper%E5%85%A8%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94paxos%E7%9A%84%E7%81%B5%E9%AD%82/</a></li>
<li><a href="http://blog.csdn.net/shenlan211314/article/details/6187040">http://blog.csdn.net/shenlan211314/article/details/6187040</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thrift入门]]></title>
    <link href="http://ellios.github.com//blog/2012/10/24/thrift-guide/"/>
    <updated>2012-10-24T21:59:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/24/thrift-guide</id>
    <content type="html"><![CDATA[<p>前几天介绍了下Protocol Buffer，这次研究下和PB比较类似的Thrift。这两者都定义了代码独立的数据结构描述语法，并且提供了工具将定义的数据结构转化为相应的代码（Java，C++，Python之类的）。但是从使用上来说，Thrift提供的功能要更丰富一些，简单列下对二者区别的认识</p>

<ul>
<li>Thrfit从语法上来说，更接近C的语法，对程序员的友好性要更好些</li>
<li>Thrift对rpc的支持比较好，接口的描述语法更类似与通常的接口声明。PB的接口只支持单一的输入参数，如果有多个参数，需要自己定义参数的数据结构，使用起来很别扭。不仅仅是语法上，Thrift对rpc是提供了完整的支持的，用Thrift可以很方便的写出rpc的Server和Client端，PB则要自己写网络层。</li>
<li>PB对于容器类的数据结构只提供了对list的直接支持，而Thrift还提供了set和map类型，符合通常程序员的使用习惯</li>
<li>Thrift直接支持的语言比较多，PB只支持Java，C++，Python，不过PB有很多第三方实现的对其他语言的支持</li>
<li>PB的文档更好些，从发布的节奏上来看PB要更活跃一些。学习Thrift一定要看看源码</li>
<li>PB的性能要更好些，不过Thrift也不会太差，一般的生产环境下，这点性能提升可以忽略了</li>
</ul>


<h3>使用</h3>

<p>Thrift在使用前同样需要安装，这里给个安装的<a href="http://thrift.apache.org/docs/install/">传送门</a>。Thrift的源码里有些tutorial的代码，里面有各种语言的使用示例，初学thrift的话，把tutorial里的代码看明白，基本就能入门了。</p>

<h4>Types</h4>

<p>先来打点基础，看下thrift支持哪些数据类型：</p>

<ul>
<li>bool        Boolean, one byte</li>
<li>byte        Signed byte</li>
<li>i16         Signed 16-bit integer</li>
<li>i32         Signed 32-bit integer</li>
<li>i64         Signed 64-bit integer</li>
<li>double      64-bit floating point value</li>
<li>string      String</li>
<li>binary      Blob (byte array)</li>
<li>map&lt;t1,t2>  Map from one type to another</li>
<li>list<t1>    Ordered list of one type</li>
<li>set<t1>     Set of unique elements of one type</li>
</ul>


<p>相对与pb，thrift多了map,list,set这些容器类型，但是基本的数值类型少了一些，不过我们需要用到的也都有了。</p>

<h4>示例</h4>

<p>基础的内容就介绍这么多了，下面直接上例子，估计看了例子大家对thrift的语法也了解差不多了。</p>

<figure class='code'><figcaption><span>demo.thrift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">/*</span>
</span><span class='line'><span class="o">*</span> <span class="n">demo</span><span class="o">.</span><span class="n">thrift</span>
</span><span class='line'><span class="o">*</span> <span class="n">thrift</span> <span class="n">usage</span> <span class="n">demo</span>
</span><span class='line'><span class="o">*/</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">cpp</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">py</span> <span class="n">ellios</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'>
</span><span class='line'><span class="n">enum</span> <span class="n">Operation</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ADD</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">SUBTRACT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DIVIDE</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">struct</span> <span class="n">Work</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">:</span> <span class="n">i32</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">:</span> <span class="n">i32</span> <span class="n">num2</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">3</span><span class="p">:</span> <span class="n">Operation</span> <span class="n">op</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">4</span><span class="p">:</span> <span class="n">optional</span> <span class="n">string</span> <span class="n">comment</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">exception</span> <span class="n">InvalidOperation</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="p">:</span> <span class="n">i32</span> <span class="n">what</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">:</span> <span class="n">string</span> <span class="n">why</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">Calculator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">i32</span> <span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">i32</span> <span class="n">logid</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="n">Work</span> <span class="n">w</span><span class="p">)</span> <span class="n">throws</span> <span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">InvalidOperation</span> <span class="n">ouch</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>java的例子</h4>

<p>执行下面的命令，会生成相应的java代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> thrift --gen java --out . demo.thrift
</span></code></pre></td></tr></table></div></figure>


<h5>Java Server</h5>

<p>首先实现接口</p>

<figure class='code'><figcaption><span>CaloculatorServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CaloculatorServiceImpl</span>  <span class="kd">implements</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">logid</span><span class="o">,</span> <span class="n">Work</span> <span class="n">work</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidOperation</span><span class="o">,</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;calculate(&quot;</span> <span class="o">+</span> <span class="n">logid</span> <span class="o">+</span> <span class="s">&quot;, {&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">+</span> <span class="s">&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">ADD:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">+</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SUBTRACT:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">-</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">MULTIPLY:</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">*</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">DIVIDE:</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidOperation</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">io</span><span class="o">.</span><span class="na">why</span> <span class="o">=</span> <span class="s">&quot;Cannot divide by 0&quot;</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="n">io</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">val</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">/</span> <span class="n">work</span><span class="o">.</span><span class="na">num2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">InvalidOperation</span> <span class="n">io</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidOperation</span><span class="o">();</span>
</span><span class='line'>                <span class="n">io</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">work</span><span class="o">.</span><span class="na">op</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="n">io</span><span class="o">.</span><span class="na">why</span> <span class="o">=</span> <span class="s">&quot;Unknown operation&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">io</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面实现一个Server，让人们可以调用服务</p>

<figure class='code'><figcaption><span>DemoServer.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoServer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TTransportException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="n">calculatorService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CaloculatorServiceImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Processor</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Processor</span><span class="o">(</span><span class="n">calculatorService</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TServerTransport</span> <span class="n">serverTransport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TServerSocket</span><span class="o">(</span><span class="mi">8000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">(</span><span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">.</span><span class="na">Args</span><span class="o">(</span><span class="n">serverTransport</span><span class="o">).</span><span class="na">processor</span><span class="o">(</span><span class="n">processor</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting the simple server...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">serve</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Java Client</h5>

<p>接下来实现一个客户端，调用服务。</p>

<figure class='code'><figcaption><span>DemoClient.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TTransport</span> <span class="n">transport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TSocket</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">,</span> <span class="mi">8000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">transport</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>        <span class="n">TProtocol</span> <span class="n">protocol</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TBinaryProtocol</span><span class="o">(</span><span class="n">transport</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Calculator</span><span class="o">.</span><span class="na">Iface</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">.</span><span class="na">Client</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Work</span> <span class="n">work</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Work</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="na">DIVIDE</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">quotient</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">work</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Whoa we can divide by 0&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidOperation</span> <span class="n">io</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid operation: &quot;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">why</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="na">SUBTRACT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num1</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>
</span><span class='line'>        <span class="n">work</span><span class="o">.</span><span class="na">num2</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">work</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;15-10=&quot;</span> <span class="o">+</span> <span class="n">diff</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidOperation</span> <span class="n">io</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid operation: &quot;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">why</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">transport</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>python示例</h4>

<p>由于前面已经实现了一个Java的Server，这里就只实现一个client了。</p>

<figure class='code'><figcaption><span>demo_client.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">me.ellios.demo</span> <span class="kn">import</span> <span class="n">Calculator</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">me.ellios.demo.ttypes</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift</span> <span class="kn">import</span> <span class="n">Thrift</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TSocket</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TTransport</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">thrift.protocol</span> <span class="kn">import</span> <span class="n">TBinaryProtocol</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>  <span class="c"># Make socket</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=</span> <span class="n">TSocket</span><span class="o">.</span><span class="n">TSocket</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Buffering is critical. Raw sockets are very slow</span>
</span><span class='line'>  <span class="n">transport</span> <span class="o">=</span> <span class="n">TTransport</span><span class="o">.</span><span class="n">TBufferedTransport</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Wrap in a protocol</span>
</span><span class='line'>  <span class="n">protocol</span> <span class="o">=</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">TBinaryProtocol</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Create a client to use the protocol encoder</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">Calculator</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">protocol</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Connect!</span>
</span><span class='line'>  <span class="n">transport</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>  <span class="n">work</span> <span class="o">=</span> <span class="n">Work</span><span class="p">()</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="n">DIVIDE</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num2</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">quotient</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">work</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Whoa? You know how to divide by zero?&#39;</span>
</span><span class='line'>  <span class="k">except</span> <span class="n">InvalidOperation</span><span class="p">,</span> <span class="n">io</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;InvalidOperation: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">io</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">Operation</span><span class="o">.</span><span class="n">SUBTRACT</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num1</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>  <span class="n">work</span><span class="o">.</span><span class="n">num2</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">diff</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">work</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;15-10=</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Close!</span>
</span><span class='line'>  <span class="n">transport</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="n">Thrift</span><span class="o">.</span><span class="n">TException</span><span class="p">,</span> <span class="n">tx</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">tx</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考资料</h3>

<ul>
<li><a href="http://diwakergupta.github.com/thrift-missing-guide/">http://diwakergupta.github.com/thrift-missing-guide/</a></li>
<li><a href="http://wiki.apache.org/thrift/FrontPage">http://wiki.apache.org/thrift/FrontPage</a></li>
<li><a href="http://thrift.apache.org">http://thrift.apache.org</a></li>
<li><a href="http://jnb.ociweb.com/jnb/jnbJun2009.html">http://jnb.ociweb.com/jnb/jnbJun2009.html</a></li>
<li><a href="http://stackoverflow.com/questions/69316/biggest-differences-of-thrift-vs-protocol-buffers">http://stackoverflow.com/questions/69316/biggest-differences-of-thrift-vs-protocol-buffers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[艰难的reviewboard折腾]]></title>
    <link href="http://ellios.github.com//blog/2012/10/24/reviewboard/"/>
    <updated>2012-10-24T16:54:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/24/reviewboard</id>
    <content type="html"><![CDATA[<p>折腾了半天的<a href="http://www.reviewboard.org/">Review Board</a>，终于能提交请求了。因为期间的折腾过程特别曲折，所以记录一下。</p>

<p>因为是全公司要推广CodeReview，所以团队进行了一次简单培训，简单说了下Review Board的安装和使用，不过是基于windows和eclipse的，用的是一个eclipse的插件<a href="http://code.taobao.org/p/tao-reviewboard/wiki/index/">tao-reviewboard</a>，安装和配置都比较简单。因为移到linux和idea的开发环境已经好久了，所以我只能自己折腾了。</p>

<p>google了下，发现有基于idea的reviewboard插件，装上试了下，跟tao-reviewboard比起来，可以说是非常简陋，而且提交review请求的时候，报了一堆的错误。以为是自己的配置有问题，于是看着Review Board的文档，把配置文件~/.reviewboardrc重新检查了下，文件的内容如下</p>

<figure class='code'><figcaption><span>.reviewboardrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">REVIEWBOARD_URL</span> <span class="o">=</span> <span class="s2">&quot;http://reviewboard.xxx.com/&quot;</span>
</span><span class='line'><span class="nv">USERNAME</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">PASSWORD</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">HTTP_USERNAME</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">HTTP_PASSWORD</span> <span class="o">=</span> <span class="s2">&quot;xxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完之后，继续报错，报的是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ProtocolException</span><span class="o">:</span> <span class="n">Server</span> <span class="n">redirected</span> <span class="n">too</span> <span class="n">many</span>  <span class="n">times</span>
</span></code></pre></td></tr></table></div></figure>


<p>google无结果，简单看了源码，还得了解idea的插件开发的一些知识，暂时没功夫，于是放弃。</p>

<p>试着装了下eclipse，发现tao-reviewboard是依赖于subclipse的，这个东西以前就装过，没有成功，这回试了下，果然还是不成功。同事说需要编译相应版本的svn客户端，觉得单独为个CodeReview再把eclipse折腾半天，不值得，于是放弃。</p>

<p>又去啃Review Board的文档了，Review Board提供了一个命令行的工具post-review，这个工具是python写的，看到是python写的就很有亲切感。安装很简单，执行下面的命令（之前已经有了python的环境，没有的可能还得提前装python和easy_install）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>easy_install -U RBTools
</span></code></pre></td></tr></table></div></figure>


<p>提交review请求的命令也很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>post-review -p --target-groups<span class="o">=</span>xxx --target-people<span class="o">=</span>xxx --summary<span class="o">=</span>xxx --description<span class="o">=</span>xxx files
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的命令，报了206的错误。提示</p>

<blockquote><p>The repository path specified is not in the list of known repositories</p></blockquote>


<p>于是，加上-d参数，打印debug信息，觉得可能repository没加到Review Board Server里面，但是其他人都可以提交review，于是试着进到代码目录，在代码当前目录提交review请求，没想到竟然pass了这个问题，不过马上又报了一个207的错误。提示</p>

<blockquote><p>The repository path specified is not in the list of known repositories</p></blockquote>


<p>这个问题，试了好多办法都不行，于是只能调试源码，下了源码，一路输出debug信息，怀疑是diff文件的问题。看了下其他同事提交的diff文件，他们的diff文件里开头，代码文件的路径是相对路径，而我生成的竟然是绝对路径，而造成这一问题的原因就是svn.py下面这一句，把这句注释掉，替换掉RBTools-xxx.egg这个文件里面的相应文件</p>

<figure class='code'><figcaption><span>svn.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">diff</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">convert_to_absolute_paths</span><span class="p">(</span><span class="n">diff</span><span class="p">,</span> <span class="n">repository_info</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>试了下，终于OK了。post-review的那些参数太繁琐而且又长，以后有时间写个程序自己定制下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protocol Buffer入门]]></title>
    <link href="http://ellios.github.com//blog/2012/10/19/pb-tutorial/"/>
    <updated>2012-10-19T16:52:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/10/19/pb-tutorial</id>
    <content type="html"><![CDATA[<h2>是啥</h2>

<blockquote><p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the &#8220;old&#8221; format.</p><footer><strong>Google, Developer Guide,</strong> <cite><a href='https://developers.google.com/protocol-buffers/docs/overview'>developers.google.com/docs/&hellip;</a></cite></footer></blockquote>


<p>上面是Google官方文档对Protocol Buffer(简称PB)的定义，简单翻译下。</p>

<ul>
<li>序列化结构数据的自动化机制，类似XML，但是更小，更快，更简单</li>
<li>你只需定义你的数据结构，就可以用PB生成的源码去操作结构数据</li>
<li>支持多种语言</li>
<li>数据结构向后兼容</li>
</ul>


<h2>性能</h2>

<p>PB的性能，数据大小口碑一直不错，好多公司也都在用。这里有些人们做的<a href="http://code.google.com/p/thrift-protobuf-compare/wiki/BenchmarkingV2">Benchmark</a>数据。相对与未压缩的xml或者json来说是有不小的优势的，官方文档的说法是比xml要小3-10倍，快20-100倍。</p>

<h2>使用</h2>

<p>在使用PB之前要先定义你的数据结构，PB有一套数据结构定义的语法，你需要使用这套语法来定义你的结构。定义结构的代码一般会写到一个以.proto为后缀的文件中（文件后缀好像没有强制）</p>

<h3>语法</h3>

<h4>Message</h4>

<p>Message类似于Java中的对象，C中的struct，是PB中数据封装的基本单元，一般我们在PB中定义的数据结构就是一个个的Message了。</p>

<figure class='code'><figcaption><span>message.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">message</span> <span class="n">SearchRequest</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">query</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">int32</span> <span class="n">page_number</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">int32</span> <span class="n">result_per_page</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码就定义了一个message</p>

<ul>
<li>message由field组成，类似对象中的成员变量</li>
<li>要定义field的类型，类型包括scalar（待会儿说）， enumeration，以及message（支持嵌套哦）</li>
<li>要定义field的规则，规则有required（值不能为空）,optional（值可以为空），repeated（重复，用来声明列表）</li>
<li>每个field要分配Tag，tag就是每行最后的那写数字，占位符的意思。数据编码后用tag来对应每个field。tag从1开始，而且是动态编码的，1-16占一个字节，16-2047两个字节，最大是2<sup>29</sup> - 1</li>
</ul>


<h4>Scalar</h4>

<p>下图列出了PB所支持的Scalar的类型</p>

<p><img src="http://ellios.github.com//images/proto-scalar.png" alt="&quot;PB Scalar&quot;" /></p>

<h4>enum</h4>

<p>PB支持枚举类型，对应Java或者C中的枚举类型,下面是一个枚举的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="n">enum</span> <span class="n">Colour</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BLACK</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BLUE</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用</h3>

<p>使用之前需要先安装protoc，protoc用于生成对应语言的代码。除了protoc，还需要编译对应语言的库，并且添加到你的依赖路径中。<a href="http://ellios-note.readthedocs.org/en/latest/ice/protobuf.html?t">安装wiki</a></p>

<h4>数据结构</h4>

<p>首先用pb的语法定义数据结构。</p>

<figure class='code'><figcaption><span>tutorial.proto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">package</span> <span class="n">me</span><span class="o">.</span><span class="n">ellios</span><span class="o">.</span><span class="n">tutorial</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">option</span> <span class="n">java_package</span> <span class="o">=</span> <span class="s">&quot;me.ellios.tutorial&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">option</span> <span class="n">java_outer_classname</span> <span class="o">=</span> <span class="s">&quot;AddressBookProtos&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">int32</span> <span class="nb">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">string</span> <span class="n">email</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">PhoneNumber</span> <span class="n">phone</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">enum</span> <span class="n">PhoneType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MOBILE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">HOME</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WORK</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message</span> <span class="n">PhoneNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">string</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">PhoneType</span> <span class="nb">type</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="n">default</span> <span class="o">=</span> <span class="n">HOME</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">AddressBook</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>package</em>：声明生成的代码所在的包，貌似是对应cpp的命名空间</li>
<li><em>option java_package</em>：针对java，声明java代码的包</li>
<li><em>option java_outer_classname</em>：针对java，声明java代码的类</li>
</ul>


<h4>java的例子</h4>

<p>执行下面的命令，会生成AddressBookProtos.java文件，将它拷到你的工作目录中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --java_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是一段简单的示例代码，演示怎么创建对象，以及对象的序列化和反序列化。</p>

<figure class='code'><figcaption><span>AddressBookExample.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">ellios</span><span class="o">.</span><span class="na">tutorial</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.ellios.tutorial.AddressBookProtos.Person</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.ellios.tutorial.AddressBookProtos.AddressBook</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBookExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//要通过builder来构建对象，</span>
</span><span class='line'>        <span class="n">AddressBook</span><span class="o">.</span><span class="na">Builder</span> <span class="n">addressBuiler</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">Person</span><span class="o">.</span><span class="na">Builder</span> <span class="n">personBuilder</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;ellios&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span> <span class="c1">//设置name，不能为空</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">//设置id，也不能为空</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> <span class="c1">//email可以为空</span>
</span><span class='line'>            <span class="c1">//创建phone</span>
</span><span class='line'>            <span class="n">Person</span><span class="o">.</span><span class="na">PhoneNumber</span><span class="o">.</span><span class="na">Builder</span> <span class="n">phoneBuilder</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">PhoneNumber</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="n">phoneBuilder</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="s">&quot;132222222222&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">phoneBuilder</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">PhoneType</span><span class="o">.</span><span class="na">values</span><span class="o">()[</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">3</span><span class="o">)]);</span>
</span><span class='line'>            <span class="c1">//将phone添加到person中,              .</span>
</span><span class='line'>            <span class="n">personBuilder</span><span class="o">.</span><span class="na">addPhone</span><span class="o">(</span><span class="n">phoneBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">//将person添加到地址簿的列表中</span>
</span><span class='line'>            <span class="n">addressBuiler</span><span class="o">.</span><span class="na">addPerson</span><span class="o">(</span><span class="n">personBuilder</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">AddressBook</span> <span class="n">addressBook</span> <span class="o">=</span> <span class="n">addressBuiler</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook : &quot;</span>  <span class="o">+</span> <span class="n">addressBook</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">serializeBytes</span> <span class="o">=</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AddressBook</span> <span class="n">addressBook2</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">parseFrom</span><span class="o">(</span><span class="n">serializeBytes</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook2 equal to addressBook. result is &quot;</span> <span class="o">+</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">addressBook2</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">addressBook</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;addressBook&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AddressBook</span><span class="o">.</span><span class="na">Builder</span> <span class="n">addressBuilder3</span> <span class="o">=</span> <span class="n">AddressBook</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">addressBuilder3</span><span class="o">.</span><span class="na">mergeFrom</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;addressBook&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;addressBook3 equal to addressBook. result is &quot;</span> <span class="o">+</span> <span class="n">addressBook</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">addressBuilder3</span><span class="o">.</span><span class="na">build</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>python示例</h4>

<p>执行下面的命令，生成tutorial_pb2.py文件,将它拷到工作目录中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --python_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是简单的示例代码</p>

<figure class='code'><figcaption><span>address_book_example.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#! /usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tutorial_pb2</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_book</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">AddressBook</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="o">.</span><span class="n">person</span><span class="o">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#39;ellios</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="n">phone</span><span class="o">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'>    <span class="n">phone_number</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="s">&quot;13233333333&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">MOBILE</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">HOME</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="n">phone_number</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">Person</span><span class="o">.</span><span class="n">WORK</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;address_book : &#39;</span><span class="p">,</span> <span class="n">address_book</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">address_book</span><span class="o">.</span><span class="n">SerializeToString</span><span class="p">())</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_book2</span> <span class="o">=</span> <span class="n">tutorial_pb2</span><span class="o">.</span><span class="n">AddressBook</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">address_book2</span><span class="o">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address_book same with address_book2. the result is </span><span class="si">%d</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">address_book</span> <span class="o">==</span> <span class="n">address_book2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>cpp示例</h4>

<p>执行下面的命令，生成tutorial.pb.h和tutorial.pb.cc文件，将这两个文件拷到工作目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --cpp_out<span class="o">=</span>. tutorial.proto
</span></code></pre></td></tr></table></div></figure>


<p>下面是一段示例代码</p>

<figure class='code'><figcaption><span>address_book_example.cc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &quot;tutorial.pb.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Verify that the version of the library that we linked against is</span>
</span><span class='line'>  <span class="c1">// compatible with the version of the headers we compiled against.</span>
</span><span class='line'>  <span class="n">GOOGLE_PROTOBUF_VERIFY_VERSION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tutorial</span><span class="o">::</span><span class="n">AddressBook</span> <span class="n">address_book</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">*</span> <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="p">.</span><span class="n">add_person</span><span class="p">();</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_id</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_name</span><span class="p">(</span><span class="s">&quot;ellios&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_email</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">::</span><span class="n">PhoneNumber</span><span class="o">*</span> <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="o">-&gt;</span><span class="n">add_phone</span><span class="p">();</span>
</span><span class='line'>      <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_number</span><span class="p">(</span><span class="s">&quot;13333333333&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_type</span><span class="p">(</span><span class="n">tutorial</span><span class="o">::</span><span class="n">Person</span><span class="o">::</span><span class="n">HOME</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Write the new address book back to disk.</span>
</span><span class='line'>  <span class="n">fstream</span> <span class="n">output</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">out</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">trunc</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">address_book</span><span class="p">.</span><span class="n">SerializeToOstream</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Failed to write address book.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;address_book : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address_book</span><span class="p">.</span><span class="n">person_size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tutorial</span><span class="o">::</span><span class="n">AddressBook</span> <span class="n">address_book2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fstream</span> <span class="n">input</span><span class="p">(</span><span class="s">&quot;address_book&quot;</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">in</span> <span class="o">|</span> <span class="n">ios</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'>  <span class="n">address_book2</span><span class="p">.</span><span class="n">ParseFromIstream</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Optional:  Delete all global objects allocated by libprotobuf.</span>
</span><span class='line'>  <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">ShutdownProtobufLibrary</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/proto">https://developers.google.com/protocol-buffers/docs/proto</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jdk7-fork-join]]></title>
    <link href="http://ellios.github.com//blog/2012/09/01/jdk7-fork-join/"/>
    <updated>2012-09-01T23:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/09/01/jdk7-fork-join</id>
    <content type="html"><![CDATA[<p><em>占坑&#8230;</em></p>

<h3>参考资料</h3>

<ul>
<li><a href="http://gee.cs.oswego.edu/dl/papers/fj.pdf"> fork/join framework article </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK7-TransferQueue]]></title>
    <link href="http://ellios.github.com//blog/2012/08/23/jdk7-transferqueue/"/>
    <updated>2012-08-23T09:11:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/23/jdk7-transferqueue</id>
    <content type="html"><![CDATA[<p>继续研究jdk7对concurrency的增强。这次研究下<a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166ydocs/jsr166y/TransferQueue.html">TransferQueue</a>，在jdk7里的实现是<a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166ydocs/jsr166y/LinkedTransferQueue.html">LinkedTransferQueue</a>。它实现了BlockingQueue的接口，并且提供了类似<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/SynchronousQueue.html">SynchronizeQueue</a>的功能。由于采用了CAS的方式对线程进行同步，减少了锁的开销，性能相对与其他的队列实现有了很大的提升。其内部的实现是一个FiFo的<a href="http://www.cs.rice.edu/~wns1/papers/2004-DISC-DDS.pdf">Dual Quque</a>。很多开源的项目，在jdk7之前，就早早的用上了这个东东，比如<a href="https://netty.io/">netty</a>，<a href="http://jolbox.com/">bonecp</a>，<a href="https://github.com/killme2008/xmemcached">xmemcached</a>&#8230;</p>

<p>TransferQueue的基本使用和BlockingQueue差不多，有点特殊的就是它的transfer接口。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://tech.puredanger.com/2009/02/28/java-7-transferqueue/">http://tech.puredanger.com/2009/02/28/java-7-transferqueue/</a></li>
<li><a href="http://www.yongboy.com/2012/02/forkjoinjsr166ytransferqueuelinkedtrans.html">http://www.yongboy.com/2012/02/forkjoinjsr166ytransferqueuelinkedtrans.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK排序算法]]></title>
    <link href="http://ellios.github.com//blog/2012/08/23/java-sort/"/>
    <updated>2012-08-23T09:10:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/23/java-sort</id>
    <content type="html"><![CDATA[<p>中午吃饭的时候和同事讨论了下JDK的排序算法的实现，同事坚持认为是简单的插入排序，觉得JDK应该不会这么弱，看了下JDK的源码，发现JDK针对排序是做了大量的优化的。</p>

<p>JDK对排序的实现在Arrays的sort方法里，Arrays里面有大量的重载的sort方法。而JDK7和JDK6的排序算法又有一些不同。</p>

<h3>JDK6排序实现</h3>

<p>JDK6对的排序实现针对基本类型和对象又有不同。</p>

<ol>
<li>对于基本类型，由于不要求排序是稳定的，因此使用了平均效率最好的排序算法——<a href="http://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf">快速排序</a>。为了避免最差情况的出现，JDK6对排序算法做了些优化。</li>
</ol>


<figure class='code'><figcaption><span>针对基本类型的快速排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 针对整形的排序实现</span>
</span><span class='line'><span class="cm"> * @param x 待排序的数据</span>
</span><span class='line'><span class="cm"> * @param off 起始位置</span>
</span><span class='line'><span class="cm"> * @param len 要排序的数据元素的个数</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort1</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//在小规模(size&lt;7)数组中，直接插入排序的效率要比快速排序高。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">off</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">+</span><span class="n">off</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">off</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]&gt;</span><span class="n">x</span><span class="o">[</span><span class="n">j</span><span class="o">];</span> <span class="n">j</span><span class="o">--)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//选择划分元素，即枢轴</span>
</span><span class='line'>    <span class="c1">//如果是小规模数组(size=7)，直接取中间元素作为枢轴</span>
</span><span class='line'>    <span class="c1">//如果是中等规模数组(7&lt;size&lt;=40)，则在数组首、中、尾三个位置上的数中取中间大小的数作为枢轴</span>
</span><span class='line'>    <span class="c1">//如果是大规模数组(size&gt;40),则在9个指定的数中取一个伪中数(中间大小的数s)</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="o">)</span> <span class="o">{</span>        <span class="c1">// Big arrays, pseudomedian of 9</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="mi">8</span><span class="o">;</span>
</span><span class='line'>            <span class="n">l</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span>     <span class="n">l</span><span class="o">+</span><span class="n">s</span><span class="o">,</span> <span class="n">l</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">m</span><span class="o">-</span><span class="n">s</span><span class="o">,</span>   <span class="n">m</span><span class="o">,</span>   <span class="n">m</span><span class="o">+</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">med3</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span> <span class="c1">// Mid-size, med of 3</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 针对相同的元素做优化， 形成 v* (&lt;v)* (&gt;v)* v* 的数组</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">off</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">a</span><span class="o">++,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>            <span class="n">b</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="n">b</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">--);</span>
</span><span class='line'>            <span class="n">c</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">++,</span> <span class="n">c</span><span class="o">--);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将所有相同的枢轴都移到中间，形成(&lt;v)* v* (&gt;v)*</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">off</span> <span class="o">+</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="n">off</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="n">a</span>  <span class="o">);</span>  <span class="n">vecswap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">d</span><span class="o">-</span><span class="n">c</span><span class="o">,</span>   <span class="n">n</span><span class="o">-</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>  <span class="n">vecswap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span>   <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 递归排序子数组</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="n">sort1</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">d</span><span class="o">-</span><span class="n">c</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="n">sort1</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="n">s</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>针对对象数组，为了保证排序是稳定的，JDK6采用了归并排序，同样也做了一些优化。</li>
</ol>


<figure class='code'><figcaption><span>针对对象数据的归并排序</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 归并排序对象数组</span>
</span><span class='line'><span class="cm"> * @param src 原待排数组</span>
</span><span class='line'><span class="cm"> * @param dest 目的待排数组</span>
</span><span class='line'><span class="cm"> * @param low 待排数组的下界位置</span>
</span><span class='line'><span class="cm"> * @param high 待排数组的上界位置</span>
</span><span class='line'><span class="cm"> * @param off 从数组的第off个元素开始排序</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">src</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">Object</span><span class="o">[]</span> <span class="n">dest</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">low</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">high</span><span class="o">,</span>
</span><span class='line'>                              <span class="kt">int</span> <span class="n">off</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//在小规模(size&lt;7)数组中，使用归并排序。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="n">INSERTIONSORT_THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">low</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">high</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">low</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="o">((</span><span class="n">Comparable</span><span class="o">)</span> <span class="n">dest</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">dest</span><span class="o">[</span><span class="n">j</span><span class="o">])&gt;</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//将src数组划分为两半，并分别递归做归并，</span>
</span><span class='line'>    <span class="c1">//在递归调用mergeSort时将desc和src的位置做了互换。</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">destLow</span>  <span class="o">=</span> <span class="n">low</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">destHigh</span> <span class="o">=</span> <span class="n">high</span><span class="o">;</span>
</span><span class='line'>    <span class="n">low</span>  <span class="o">+=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>    <span class="n">high</span> <span class="o">+=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">src</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="o">-</span><span class="n">off</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">src</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">high</span><span class="o">,</span> <span class="o">-</span><span class="n">off</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//如果低子列表中的最高元素小于高子列表中的最低元素，则忽略合并</span>
</span><span class='line'>    <span class="c1">//如果需要归并的两端low~(middle-1)，middle~high已经有序，即src[mid-1]==src[mid]。</span>
</span><span class='line'>    <span class="c1">//那么只需要将src的low~high赋值对应的dest即可，无需再归并。</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(((</span><span class="n">Comparable</span><span class="o">)</span><span class="n">src</span><span class="o">[</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">src</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">dest</span><span class="o">,</span> <span class="n">destLow</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//将src的两个部分做归并操作，并赋值给dest</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">destLow</span><span class="o">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">low</span><span class="o">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">destHigh</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">&gt;=</span> <span class="n">high</span> <span class="o">||</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">Comparable</span><span class="o">)</span><span class="n">src</span><span class="o">[</span><span class="n">p</span><span class="o">]).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">q</span><span class="o">])&lt;=</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">dest</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">p</span><span class="o">++];</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">dest</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">src</span><span class="o">[</span><span class="n">q</span><span class="o">++];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JDK7的排序实现</h3>

<ol>
<li><p>JDK7针对基本类型使用了<a href="http://iaroslavski.narod.ru/quicksort/DualPivotQuicksort.pdf">Dual Pivot Quicksort</a>,这种快速排序算法，相对于传统的单Pivot的快速排序效率要更好。</p></li>
<li><p>JDK7针对对象数组采用了<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">TimSort</a>, 这也是python的排序算法。</p></li>
</ol>


<h3>参考资料</h3>

<ul>
<li><a href="http://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf">Engineering a Sort Function</a></li>
<li><a href="http://hxraid.iteye.com/blog/665095">http://hxraid.iteye.com/blog/665095</a></li>
<li><a href="http://iaroslavski.narod.ru/quicksort/DualPivotQuicksort.pdf">Dual Pivot Quicksort </a></li>
<li><a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">TimSort</a></li>
<li><a href="http://yangdong.iteye.com/blog/1170214">http://yangdong.iteye.com/blog/1170214</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK7 Concurrency Phaser]]></title>
    <link href="http://ellios.github.com//blog/2012/08/14/jdk7-concurrency-phaser/"/>
    <updated>2012-08-14T16:51:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/14/jdk7-concurrency-phaser</id>
    <content type="html"><![CDATA[<p>继续研究Jdk7的新特性，这次看看jdk7对Concurrency的增强。concurrency这次新增了3个新元素。</p>

<ol>
<li>Phaser,类似于CountDownLatch和CyclicBarrier</li>
<li>TransferQueue, 比SynchronousQueue更加高效的队列</li>
<li>Fork-Join, 类似与MapReduce的东东</li>
</ol>


<p>体验下Phaser, 这个东东和CountDownLatch,CyclicBarrier的功能比较类似，但是要更加灵活，提供了更多的控制。</p>

<p>先来回顾下CountDownLatch, CyclicBarrier。下面这段程序每次同时执行一组任务，然后当这一组任务执行完后，再执行下一组。用CyclicBarrier对每组的各个任务的执行时机进行控制，用CountDownLatch对各组任务的执行时机进行控制。</p>

<div><script src='https://gist.github.com/3361796.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>复习完毕，下面来把Phaser好好弄清楚。这个东东究竟是个啥，为啥能比CountDownLatch，CyclicBarrier更灵活呢。Phaser类的注释里对Phaser做了充分的描述，我们这里简单整理下。</p>

<p>Phaser是一个可重用的同步Barrier，类似与CountDownLatch和CyclicBarrier，但是要更加灵活</p>

<ol>
<li><p><em>Registration</em>. Phaser支持通过register()和bulkRegister(int parties)方法来动态调整注册任务的数量，此外也支持通过其构造函数进行指定初始数量。在适当的时机，Phaser支持减少注册任务的数量，例如 arriveAndDeregister()。单个Phaser实例允许的注册任务数的上限是65535。</p></li>
<li><p><em>Arrival</em>. 正如Phaser类的名字所暗示，每个Phaser实例都会维护一个phase number，初始值为0。每当所有注册的任务都到达Phaser时，phase number累加，并在超过Integer.MAX_VALUE后清零。arrive()和arriveAndDeregister()方法用于记录到 达，arriveAndAwaitAdvance()方法用于记录到达，并且等待其它未到达的任务。</p></li>
<li><p><em>Termination</em>.Phaser支持终止。Phaser终止之后，调用register()和bulkRegister(int parties)方法没有任何效果，arriveAndAwaitAdvance()方法也会立即返回。触发终止的时机是在protected boolean onAdvance(int phase, int registeredParties)方法返回时，如果该方法返回true，那么Phaser会被终止。默认实现是在注册任务数为0时返回true（即 return registeredParties == 0;）。此外，forceTermination()方法用于强制终止，isTerminated()方法用于判断是否已经终止。</p></li>
<li><p><em>Tiering</em>. Phaser支持层次结构，即通过构造函数Phaser(Phaser parent)和Phaser(Phaser parent, int parties)构造一个树形结构。这有助于减轻因在单个的Phaser上注册过多的任务而导致的竞争，从而提升吞吐量，代价是增加单个操作的开销。</p></li>
</ol>


<p>描述已经好清楚了，下面我们用Phaser实现上面类似功能的程序。</p>

<div><script src='https://gist.github.com/3371555.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>参考资料</h3>

<ul>
<li><a href="http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/">http://puredanger.com/tech/2009/11/15/jsr-166-concurrency-updates-hit-jdk-7/</a></li>
<li><a href="http://tech.puredanger.com/2009/02/28/java-7-transferqueue/">http://tech.puredanger.com/2009/02/28/java-7-transferqueue/</a></li>
<li><a href="http://yaofeng928.iteye.com/blog/1136648">http://yaofeng928.iteye.com/blog/1136648</a></li>
<li><a href="http://whitesock.iteye.com/blog/1135457">http://whitesock.iteye.com/blog/1135457</a></li>
<li><a href="http://www.blogjava.net/xylz/archive/2010/07/09/325612.html">CountDownLatch的源码分析</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffeescript语法篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref/"/>
    <updated>2012-08-09T01:18:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref</id>
    <content type="html"><![CDATA[<p>上一篇简单分析了下CoffeeScript的源码，这篇开始介绍CoffeeScript的语法。CoffeeScript的语法相比JavaScript要清爽好多，如果有Python，Ruby的经验的话，基本上半天就差不多了。CoffeeScript最终还是会被编译为JavaScript，所以基本的数据类型和JavaScript是一样，学习的时候和编译的JavaScript对应起来会更容易理解。</p>

<h3>Examples</h3>

<p>先睹为快，给个二分查找的例子。</p>

<figure class='code'><figcaption><span>二分查找例子 binary_search.coffee   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">list</span><span class="o">.</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">val</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mid</span> <span class="k">if</span> <span class="n">val</span> <span class="n">is</span> <span class="n">target</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="k">then</span> <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">2</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span><span class="p">,</span> <span class="mi">30</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">4</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="o">]</span><span class="p">,</span> <span class="mi">1200</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">0</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译后的js代码如下</p>

<figure class='code'><figcaption><span>编译后的JS binary_search.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">high</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">],</span> <span class="nx">low</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">high</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">low</span> <span class="o">&lt;</span> <span class="nx">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">low</span> <span class="o">+</span> <span class="nx">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">val</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">mid</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">&lt;</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">low</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">high</span> <span class="o">=</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="mi">30</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="p">],</span> <span class="mi">1200</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="p">],</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>后面会介绍CoffeeScript的各个语法点。</p>

<h3>Functions</h3>

<figure class='code'><figcaption><span>coffee函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#匿名函数</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="k">do</span> <span class="o">-&gt;</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="c1">#非匿名函数，函数隐式返回最后一个表达式的值</span>
</span><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="c1">#调用函数</span>
</span><span class='line'><span class="n">cube</span>   <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">square</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="c1">#函数可以有默认参数</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="p">(</span><span class="n">container</span><span class="p">,</span> <span class="n">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="s2">&quot;Filling the </span><span class="si">#{</span><span class="n">container</span><span class="si">}</span><span class="s2"> with </span><span class="si">#{</span><span class="n">liquid</span><span class="si">}</span><span class="s2">...&quot;</span>
</span><span class='line'><span class="c1">#函数绑定</span>
</span><span class='line'><span class="n">setName</span> <span class="o">=</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>编译后</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cube</span><span class="p">,</span> <span class="nx">fill</span><span class="p">,</span> <span class="nx">setName</span><span class="p">,</span> <span class="nx">square</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})());</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">square</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">2</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">cube</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fill</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">liquid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">liquid</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">liquid</span> <span class="o">=</span> <span class="s2">&quot;coffee&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Filling the &quot;</span> <span class="o">+</span> <span class="nx">container</span> <span class="o">+</span> <span class="s2">&quot; with &quot;</span> <span class="o">+</span> <span class="nx">liquid</span> <span class="o">+</span> <span class="s2">&quot;...&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffeescript源码篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-source-code/"/>
    <updated>2012-08-09T01:17:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-source-code</id>
    <content type="html"><![CDATA[<p>最近为了凑运费，买了本《深入浅出CoffeeScript》，本来只打算随便翻翻的，不过看了以后发现<a href="http://coffeescript.org/">CoffeeScript</a>还是满有意思的，于是决定好好研究下，这里分享下自己的学习过程。</p>

<h4>Install</h4>

<p>装之前需要提前装好node和npm(具体怎么装google之吧)，node和npm装好后，执行下面的命令，就可以开始体验CoffeeScript了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>npm install -g coffee-script
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Compile</h4>

<p>简单的体验下后，对于它把那么灵活的语法转化为比较工整的JS语法有点小好奇，于是把它的源码clone出来，简单的研究了下。</p>

<p>先试着编译它的源码，编译的操作过程如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/jashkenas/coffee-script.git
</span><span class='line'><span class="nb">cd </span>coffee-script
</span><span class='line'>bin/cake build:full
</span></code></pre></td></tr></table></div></figure>


<p>OK，编译很迅速，大家可以对源码做各种折腾了。</p>

<hr />

<h4>Jison</h4>

<p>CoffeeScript的核心是一个编译器，它把符合CoffeeScript语法规则的文件转化为JS语法。而CoffeeScript又是利用<a href="http://zaach.github.com/jison/">Jison</a>实现词法和语法的解析。CoffeeScript将语法规则都写到grammar.js文件里，然后利用Jison生成符合该语法规则的编译器。</p>

<p>只要写个简单的语法规则，就可以实现一个编译器，这东西太高级了，于是开始折腾Jison。它的网站上有很多例子，其中有一个生成计算程序的例子，我把它稍微缩减下，让+做-，-做+。</p>

<figure class='code'><figcaption><span>simple_cal.jison</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">/*</span> <span class="n">lexical</span> <span class="n">grammar</span> <span class="o">*/</span>
</span><span class='line'><span class="o">%</span><span class="n">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span>
</span><span class='line'>\<span class="n">s</span><span class="o">+</span>                   <span class="o">/*</span> <span class="n">skip</span> <span class="n">whitespace</span> <span class="o">*/</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="err">?</span>\<span class="n">b</span>  <span class="k">return</span> <span class="s">&#39;NUMBER&#39;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;-&quot;</span>                   <span class="k">return</span> <span class="s">&#39;-&#39;</span><span class="p">;</span>
</span><span class='line'><span class="s">&quot;+&quot;</span>                   <span class="k">return</span> <span class="s">&#39;+&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;&lt;</span><span class="n">EOF</span><span class="o">&gt;&gt;</span>               <span class="k">return</span> <span class="s">&#39;EOF&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">/</span><span class="n">lex</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*</span> <span class="n">operator</span> <span class="n">associations</span> <span class="ow">and</span> <span class="n">precedence</span> <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">left</span> <span class="s">&#39;+&#39;</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">start</span> <span class="n">expressions</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="o">/*</span> <span class="n">language</span> <span class="n">grammar</span> <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">expressions</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">e</span> <span class="n">EOF</span>
</span><span class='line'>        <span class="p">{</span><span class="n">typeof</span> <span class="n">console</span> <span class="o">!==</span> <span class="s">&#39;undefined&#39;</span> <span class="err">?</span> <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="err">$</span><span class="mi">1</span><span class="p">;}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">e</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">e</span> <span class="s">&#39;+&#39;</span> <span class="n">e</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="o">-</span><span class="err">$</span><span class="mi">3</span><span class="p">;}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">e</span> <span class="s">&#39;-&#39;</span> <span class="n">e</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="o">+</span><span class="err">$</span><span class="mi">3</span><span class="p">;}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">NUMBER</span>
</span><span class='line'>        <span class="p">{</span><span class="err">$$</span> <span class="o">=</span> <span class="n">Number</span><span class="p">(</span><span class="n">yytext</span><span class="p">);}</span>
</span><span class='line'>    <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>体验下效果把，当执行7-3时，返回的却是10。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt;&gt; jison simple_cal.jison <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;7-3&quot;</span> &gt; 2 <span class="o">&amp;&amp;</span> node simple_cal.js 2
</span><span class='line'>&gt;&gt; 10
</span></code></pre></td></tr></table></div></figure>


<p>再深入的原理，就要涉及编译原理的内容，那个东西偶学得可烂的，以后有时间再研究下把。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://coffeescript.org/">http://coffeescript.org/</a></li>
<li><a href="http://zaach.github.com/jison/">http://zaach.github.com/jison/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
