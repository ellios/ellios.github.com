<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ganglia | ellios's blog]]></title>
  <link href="http://ellios.github.com//blog/categories/ganglia/atom.xml" rel="self"/>
  <link href="http://ellios.github.com//"/>
  <updated>2013-04-27T15:12:50+08:00</updated>
  <id>http://ellios.github.com//</id>
  <author>
    <name><![CDATA[ellios]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ganglia python]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-python/"/>
    <updated>2013-04-16T23:30:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-python</id>
    <content type="html"><![CDATA[<p>老大想把我们放在mongdodb的一些统计数据，在Ganglia展示出来，想到Ganglia支持用python来写扩展模块，于是欣然应下，正好也学习下怎么写Ganglia的python扩展模块。</p>

<p>Ganglia要集成python模块是非常容易的，简单的数据展示，只需要写个pyconf后缀的文件和一个python的脚本就好了。Ganglia自身的源码里面也有很多python的模块的源码，其中有一个是专门用来做示例用的，我们就从他开始吧。</p>

<p>首先要弄清楚你需要收集哪些各数据，在pyconf文件中配置你要收集的数据的名称，像下面这样
```js
modules {
  module {</p>

<pre><code>name = "example"
language = "python"
enabled = "yes"
param RandomMax {
    value = 600 
}   
param ConstantValue {
    value = 112 
}   
</code></pre>

<p>  }
}</p>

<p>collection_group {
  collect_every = 10
  time_threshold = 50
  metric {</p>

<pre><code>name = "PyRandom_Numbers"
value_threshold = 1.0 
</code></pre>

<p>  }
}</p>

<p>collection_group {
  collect_once = yes
  time_threshold = 20
  metric {</p>

<pre><code>name = "PyConstant_Number"
</code></pre>

<p>  }
}</p>

<p>```
很简单，modules里面配置了要加载的模块的名称，具体的配置项这里就不纠结了，collection_group里面可以配置你要收集的数据，metric项就是了。</p>

<p>配置文件写好了，下面看看真真干活的模块吧，ganglia的python模块是有一定的规范的，每个模块必要要有 metric_init, metric_cleanup方法，metric_cleanup做些收尾的工作，当gmond关闭时释放资源。metric_init方法做初始化操作，gmond在加载模块时，会先调用metric_init方法。这里你需要定义要收集的数据的详细参数，以及数据的call_back方法。具体看下面吧。
```py</p>

<p>import random
descriptors = list()
Random_Max = 50
Constant_Value = 50</p>

<p>def Random_Numbers(name):</p>

<pre><code>'''Return a random number.'''
return int(random.uniform(0, Random_Max))
</code></pre>

<p>def Constant_Number(name):</p>

<pre><code>'''Return a constant number.'''
return int(Constant_Value)
</code></pre>

<p>def metric_init(params):</p>

<pre><code>'''Initialize the random number generator and create the
metric definition dictionary object for each metric.'''
global descriptors
global Random_Max
global Constant_Value
random.seed()

print '[pyexample] Received the following parameters'
print params

if 'RandomMax' in params:
    Random_Max = int(params['RandomMax'])
if 'ConstantValue' in params:
    Constant_Value = int(params['ConstantValue'])

d1 = {'name': 'PyRandom_Numbers',
    'call_back': Random_Numbers,
    'time_max': 90, 
    'value_type': 'uint',
    'units': 'N',
    'slope': 'both',
    'format': '%u',
    'description': 'Example module metric (random numbers)',
    'groups': 'example,random'}

d2 = {'name': 'PyConstant_Number',
    'call_back': Constant_Number,
    'time_max': 90, 
    'value_type': 'uint',
    'units': 'N',
    'slope': 'zero',
    'format': '%hu',
    'description': 'Example module metric (constant number)'}

descriptors = [d1, d2]
return descriptors
</code></pre>

<p>def metric_cleanup():</p>

<pre><code>'''Clean up the metric module.'''
pass
</code></pre>

<h1>This code is for debugging and unit testing</h1>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>params = {'RandomMax': '500',
    'ConstantValue': '322'}
metric_init(params)
for d in descriptors:
    v = d['call_back'](d['name'])
    print 'value for %s is %u' % (d['name'],  v)
</code></pre>

<p>```</p>

<p>其他还需要做些简单的配置，不过看下gmond.conf的配置文件基本上就都搞好了。这里就不啰嗦了，这两天感冒的厉害，需要好好休息。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920025573.do">Monitoring with Ganglia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia整合java]]></title>
    <link href="http://ellios.github.com//blog/2013/04/16/ganglia-java/"/>
    <updated>2013-04-16T22:09:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/04/16/ganglia-java</id>
    <content type="html"><![CDATA[<p>前段时间简单介绍了Ganglia的安装和配置，现在我们的Ganglia已经跑了起来，并且已经可以展示机器的负载，
网络，io等各种数据，但是光有机器的情况还是远远不够，我们还需要了解每个应用的运行情况。针对一些常见的应用如：Mysql，Memcached，Redis，Nginx等，Ganglia的github上有很多开源的模块，大家可以自己折腾，要是有时间，后面也会简单简介绍下。这里主要介绍下怎么用Ganglia来收集和展示Java的数据，包括JVM的运行数据和业务数据。</p>

<h4>获取JMX数据</h4>

<p>JVM的运行数据我们是从JMX获得的，其实业务数据也可以写进JMX里，所以如果你的Java应用开启了JMX的话，基本上各种数据都可以从JMX中获得了。获取JMX数据的包Ganglia的网站已经有了，叫<a href="https://github.com/ganglia/jmxetric">jmxetric</a>。要使用它，需要再jvm参数里加入如下的内容</p>

<p><code>sh
-javaagent:jmxetric-1.0.3.jar=host=xxx,port=xxx,mode=unicast,wireformat31x=true,config=jmxetric.xml
</code></p>

<p>host是接收数据gmond的host，port是gmond的端口，mode有multicast和unicast两种，由于网络原因，我们使用的是unicast（单播），wireformat31x这个不清楚，一直都是true来着。前面几项配置都可以写到jmxetric.xml里面，不过为了方便控制这些参数，放到了外面。jmxetric.xml里面写需要获取的JMX的数据项，jmxetric的站点上有各详细的示例，这个不不再占用空间了。</p>

<p>一些注意的地方:
1. jmxetric.jar还依赖与gmetric4j.jar和oncrpc.jar，所以如果是直接下载jar包的话，要把依赖的jar包也都下到，而且要和jmxetric.jar在一个目录下。我们的项目是用maven管理的，直接加如下的依赖</p>

<p>```xml</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;info.ganglia.jmxetric&lt;/groupId&gt;
    &lt;artifactId&gt;jmxetric&lt;/artifactId&gt;
    &lt;version&gt;1.0.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>```
2. 记得开启JMX哦</p>

<h4>直接发送数据</h4>

<p>如果觉得从JMX获取数据麻烦的话，或者你不想开启JMX，你也可以直接发送数据到gmond。这个也有了现成的包gmetric4j，其实jmxetric也是利用他来发送数据的。这个没啥好说的，就是利用包提供的api发送数据就好了。
写了一个工具类，对原生的api做了简单的封装。最近看了下yammer开源的metrics，很强大，有兴趣的可以看下它的源码。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Ganglia Monitor Util MonitorUtil.java   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetric</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetricSlope</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GMetricType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">info.ganglia.gmetric4j.gmetric.GangliaException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.lang.StringUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MonitorUtil</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MonitorUtil</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">HedwigConfig</span> <span class="n">HC</span> <span class="o">=</span> <span class="n">HedwigConfig</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GMetricHOlder</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">String</span> <span class="n">GANGLIA_HOST</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;ganglia.host&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">GANGLIA_PORT</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;ganglia.port&quot;</span><span class="o">,</span> <span class="mi">7649</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">GANGLIA_TTL</span> <span class="o">=</span> <span class="n">HC</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;ganglia.ttl&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">GANGLIA_HOST</span><span class="o">)){</span>
</span><span class='line'>            <span class="n">GANGLIA_HOST</span> <span class="o">=</span> <span class="n">NetworkUtils</span><span class="o">.</span><span class="na">getEth0Address</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] begin to init gmetric&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_HOST : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_HOST</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_PORT : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_PORT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[GANGLIA MONITOR] GANGLIA_TTL : &quot;</span> <span class="o">+</span> <span class="n">GANGLIA_TTL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="n">GMetric</span> <span class="n">G_METRIC</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GMetric</span><span class="o">(</span><span class="n">GANGLIA_HOST</span><span class="o">,</span> <span class="n">GANGLIA_PORT</span><span class="o">,</span>
</span><span class='line'>            <span class="n">GMetric</span><span class="o">.</span><span class="na">UDPAddressingMode</span><span class="o">.</span><span class="na">UNICAST</span><span class="o">,</span> <span class="n">GANGLIA_TTL</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">GMetric</span> <span class="nf">getGMetric</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">GMetricHOlder</span><span class="o">.</span><span class="na">G_METRIC</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * monitor a metric</span>
</span><span class='line'><span class="cm"> * @param name Name of the metric</span>
</span><span class='line'><span class="cm"> * @param value Value of the metric</span>
</span><span class='line'><span class="cm"> * @param type Type of the metric.  </span>
</span><span class='line'><span class="cm"> *        Either string|int8|uint8|int16|uint16|int32|uint32|float|double</span>
</span><span class='line'><span class="cm"> * @param units Unit of measure for the value</span>
</span><span class='line'><span class="cm"> * @param slope Either zero|positive|negative|both</span>
</span><span class='line'><span class="cm"> * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span> <span class="n">type</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">String</span> <span class="n">units</span><span class="o">,</span>  <span class="n">GMetricSlope</span> <span class="n">slope</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">GMetric</span> <span class="n">gm</span> <span class="o">=</span> <span class="n">getGMetric</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">gm</span><span class="o">.</span><span class="na">announce</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">units</span><span class="o">,</span> <span class="n">slope</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span>  <span class="n">group</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GangliaException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;monitor fail. name : {}, value:{}, error:{}&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * monitor a metric</span>
</span><span class='line'><span class="cm"> * @param name Name of the metric</span>
</span><span class='line'><span class="cm"> * @param value Value of the metric</span>
</span><span class='line'><span class="cm"> * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">BOTH</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * monitor a positive metric</span>
</span><span class='line'><span class="cm"> * @param name Name of the metric</span>
</span><span class='line'><span class="cm"> * @param value Value of the metric</span>
</span><span class='line'><span class="cm"> * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">counter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">GMetricType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">POSITIVE</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * monitor a metric</span>
</span><span class='line'><span class="cm"> * @param name Name of the metric</span>
</span><span class='line'><span class="cm"> * @param value Value of the metric</span>
</span><span class='line'><span class="cm"> * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span>  <span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Float</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">value</span><span class="o">),</span><span class="n">GMetricType</span><span class="o">.</span><span class="na">DOUBLE</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">BOTH</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * monitor a positive metric</span>
</span><span class='line'><span class="cm"> * @param name Name of the metric</span>
</span><span class='line'><span class="cm"> * @param value Value of the metric</span>
</span><span class='line'><span class="cm"> * @param group Group Name of the metric</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">counter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">group</span><span class="o">){</span>
</span><span class='line'>    <span class="n">monitor</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">Float</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">value</span><span class="o">),</span><span class="n">GMetricType</span><span class="o">.</span><span class="na">FLOAT</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">,</span> <span class="n">GMetricSlope</span><span class="o">.</span><span class="na">POSITIVE</span><span class="o">,</span> <span class="n">group</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>参考资料</h3>

<ul>
<li><a href="https://github.com/ganglia/jmxetric">https://github.com/ganglia/jmxetric</a></li>
<li><a href="https://github.com/ganglia/gmetric4j">https://github.com/ganglia/gmetric4j</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganglia]]></title>
    <link href="http://ellios.github.com//blog/2013/03/12/ganglia/"/>
    <updated>2013-03-12T23:38:00+08:00</updated>
    <id>http://ellios.github.com//blog/2013/03/12/ganglia</id>
    <content type="html"><![CDATA[<p>最近忙的一个项目，终于上线了，忙了一个多月，但是心里仍然很没谱。为什么没谱，主要是因为目前的系统缺乏有效的监控，对于机器负载，jvm的运行情况，各接口的调用次数，接口的调用时间。于是痛下决心，利用系统刚上线，空余的一周搭建一套监控系统。</p>

<p>之前做运维的工作很少，对于各种监控系统更是缺乏有效的了解，了解到的一些常用监控系统有catti，zabbix和ganglia，考虑再三选择了ganglia。为什么选择ganglia呢，理由没那么充分，可能之前看过ganglia的一些资料，对他更为熟悉，对于他出身Berkley和支持python，这两点都比较满意，于是就选择它了。</p>

<p>选型之后就开始折腾了，相关的资料不多，很多的配置都是试着来，期间走了很多的弯路，本来预计两天搞定的事情，其实用了一周多。直接导致本周计划的持续集成环境的搭建没时间搞了。这里简单记录下安装过程。</p>

<h3>相关简介</h3>

<p><a href="http://ganglia.info/">Ganglia</a>是UC Berkley发起的一个开源项目，可以用来监控数以千记的服务器集群，具有很好的扩展性。Ganglia主要包括三个部分
1. Gmond，运行在每台目标机器节点上，用于获取节点的监控数据，gmond不仅能够收集本节点的数据，还能接收其他节点发来的数据，对数据做汇集后发送到gmetad，这样就可以保证整个监控系统的可扩展性；
2. Gemtad，将各gmond的数据收集到一起，用rrdtool将数据保存到硬盘上
3. Web Front， 将rrdtool生成的数据输出可视化的图片</p>

<p>简单介绍下rrdtool（Round Robin Database Tool）
rrdtool是一种环状结构的数据库，非常适合处理时间序列的数据，能够非常高效的绘制时间序列的图片。ganglia的数据存储和可视化都是通过rrdtool实现的。</p>

<h3>安装</h3>

<h4>Ubuntu安装</h4>

<p>Ubuntu下用apt-get会自动把相关的依赖都给安装上，执行下面的命令</p>

<pre><code>```sh
sudo apt-get install ganglia-monitor ganglia-webfrontend
```
</code></pre>

<h4>rh5编译安装</h4>

<ol>
<li>安装依赖的库</li>
</ol>


<p>先用yum把相关的依赖都安装上
<code>sh
yum -y install apr-devel apr-util check-devel cairo-devel pango-devel \
libxml2-devel rpmbuild glib2-devel dbus-devel freetype-devel fontconfig-devel \
gcc-c++ expat-devel python-devel libXrender-devel libconfuse
</code>
虽然列出来好多，但是绝大多数都是一些常见的基础包，需要注意的就是expat和libconfuse</p>

<ol>
<li><p>编译安装rrdtool，执行下面的命令
<code>sh
wget http://oss.oetiker.ch/rrdtool/pub/rrdtool.tar.gz
tar zxvf rrdtool*
cd rrdtool-*
./configure --prefix=/data/apps/rrdtool
make
make install
</code></p></li>
<li><p>编译安装ganglia
<code>sh
export CPPFLAGS="$CPPFLAGS -I/opt/apps/rrdtool"
export LDFLAGS="$LDFLAGS -L/opt/apps/rrdtool"
tar –zxvf ganglia-3.1.2.tar.gz
cd ganglia-3.1.2.tar.gz
./configure --prefix=/data/apps/ganglia --with-gmetad
make
make install
</code></p></li>
</ol>


<p>4.将编译好的ganglia发布到客户端
首先在目标机器上建立ssh信任，然后执行下面的脚本
```sh</p>

<h1>!/bin/bash</h1>

<p>GANGLIA_BIN=/data/apps/ganglia/bin
GANGLIA_SBIN=/data/apps/ganglia/sbin
GANGLIA_LIB=/data/apps/ganglia/lib64
i=$1
ssh $i mkdir -p $GANGLIA_BIN
ssh $i mkdir -p $GANGLIA_SBIN
scp $GANGLIA_BIN/gmetric $i:$GANGLIA_BIN
scp ${GANGLIA_SBIN}/gmond $i:${GANGLIA_SBIN}/gmond
ssh $i ln -fs $GANGLIA_SBIN/gmond /usr/sbin/gmond
scp -r $GANGLIA_LIB $i:$GANGLIA_LIB
ssh $i mkdir -p /etc/ganglia/
scp gmond.conf $i:/etc/ganglia/gmond.conf
scp /etc/init.d/gmond $i:/etc/init.d/
scp /lib64/libexpat.so.0 $i:/lib64/
scp /usr/lib64/libconfuse.so.0 $i:/usr/lib64/
scp /usr/lib64/libapr-1.so.0 $i:/usr/lib64/
ssh $i chkconfig --add gmond
ssh $i chkconfig gmond on
ssh $i service gmond start
```</p>

<p>5.搭建Http Server
ganglia的Web界面是用php写的，所以支持php的http server是必须的。这个没啥好说的，php和各种http Server集成的方法还是
挺多的，我用的最经典的Apache+php_module的方式。</p>

<h3>配置</h3>

<p>对应于组成ganglia的三种组件，ganglia的配置也需要对这三种组件分别做配置</p>

<ol>
<li><p>Web Front的配置
Web Front的配置文件是web项目下的conf.php文件，新版的web项目可能没有这个文件，自己建一个就好了，默认是先从conf.php加载不到，如果
没有的话，就从conf_default.php加载。可以通过这个文件对web项目做些简单的定制。下面是我的配置文件。
<code>php
$conf['gmetad_root'] = "/data/appdata/ganglia";
$conf['rrds'] = "${conf['gmetad_root']}/rrds";
</code></p></li>
<li><p>Gmetad的配置
Gmetad的配置文件默认是/etc/ganglia/gmetad.conf，编译的时候可以自己指定配置文件的位置在configure加--sysconfdir=xx.这个文件里面
最重要的配置项是data_source，下面是我的一个简要的配置
<code>php
data_source "monitor" xx.xx.xx.xx:8649
data_source "test" xx.xx.xx.xx:8649
rrd_rootdir "/data/appdata/ganglia/rrds"
</code></p></li>
<li><p>Gmond的配置
Gmond是真正干活的，由于没弄明白它的配置，期间犯了好多低级错误。Gmond的默认数据收集的方式有组播和单播两种，默认是组播，组播的好处是配置非常简单，
但是对网络的可适应要差些。我们的机器由于有跨机房的问题，所以用的是单播的方式。</p></li>
</ol>


<p>生成默认的gmond配置文件
<code>sh
gmond --default_config &gt; /etc/ganglia/gmond.conf
</code></p>

<p>我的配置文件的示例
```php
globals {
  daemonize = yes
  setuid = yes
  user = nobody
  debug_level = 0
  max_udp_msg_len = 1472
  mute = no
  deaf = no
  allow_extra_data = yes
  host_dmax = 86400 /<em>secs. Expires (removes from web interface) hosts in 1 day </em>/
  host_tmax = 20 /<em>secs </em>/
  cleanup_threshold = 300 /<em>secs </em>/
  gexec = no
  send_metadata_interval = 120 /<em>secs </em>/
}</p>

<p>cluster {
  name = "cluster" /<em>这个字段是集群的名称，对应gmetad的data_source的名称 </em>/
  owner = ""
  latlong = "unspecified"
  url = ""
}</p>

<p>host {
  location = "unspecified"
}</p>

<p>udp_send_channel {
  host = xx.xx.xx.xx
  port = 7649
  ttl = 1
}</p>

<p>udp_recv_channel {
  port = 7649
  bind = yy.yy.yy.yy
}</p>

<p>tcp_accept_channel {
  port = 7649
}
```</p>

<h3>遇到的一些问题</h3>

<ol>
<li>gmond会把一些错误日志打到系统日志里面，如果有问题可以关注下系统日志</li>
<li>gmond -d 10可以打出debug信息</li>
</ol>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.imxylz.info/wiki/Ganglia/Ganglia">http://www.imxylz.info/wiki/Ganglia/Ganglia</a></li>
<li><a href="http://www.howtocn.org/ganglia_how_to">http://www.howtocn.org/ganglia_how_to</a></li>
<li><a href="http://sourceforge.net/apps/trac/ganglia/wiki">http://sourceforge.net/apps/trac/ganglia/wiki</a></li>
<li><a href="">http://ganglia.info/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
