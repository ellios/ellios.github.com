<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | ellios's blog]]></title>
  <link href="http://ellios.github.com//blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ellios.github.com//"/>
  <updated>2013-12-10T10:12:34+08:00</updated>
  <id>http://ellios.github.com//</id>
  <author>
    <name><![CDATA[ellios]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[coffeescript语法篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref/"/>
    <updated>2012-08-09T01:18:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-language-ref</id>
    <content type="html"><![CDATA[<p>上一篇简单分析了下CoffeeScript的源码，这篇开始介绍CoffeeScript的语法。CoffeeScript的语法相比JavaScript要清爽好多，如果有Python，Ruby的经验的话，基本上半天就差不多了。CoffeeScript最终还是会被编译为JavaScript，所以基本的数据类型和JavaScript是一样，学习的时候和编译的JavaScript对应起来会更容易理解。</p>

<h3>Examples</h3>

<p>先睹为快，给个二分查找的例子。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>二分查找例子 binary_search.coffee   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">list</span><span class="o">.</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">low</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">high</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;mid = (low + high) &amp;gt;&amp;gt; 1</span>
</span><span class='line'><span class="sr">val = list[mid]</span>
</span><span class='line'><span class="sr">return mid if val is target</span>
</span><span class='line'><span class="sr">if val &amp;lt; target then low = mid + 1 else high = mid</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  return -1&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">2</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span><span class="p">,</span> <span class="mi">30</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">4</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="o">]</span><span class="p">,</span> <span class="mi">1200</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="mi">0</span> <span class="n">is</span> <span class="n">index</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="o">]</span><span class="p">,</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>编译后的js代码如下</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>编译后的JS binary_search.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">index</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">high</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'><span class="nx">_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">],</span> <span class="nx">low</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">high</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">low</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">low</span> <span class="o">+</span> <span class="nx">high</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">val</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">mid</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">low</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">high</span> <span class="o">=</span> <span class="nx">mid</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span> <span class="mi">30</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">4</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1200</span><span class="p">],</span> <span class="mi">1200</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nx">index</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">70</span><span class="p">],</span> <span class="mi">0</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>后面会介绍CoffeeScript的各个语法点。</p>

<h3>Functions</h3>

<p>``` ruby coffee函数</p>

<h1>匿名函数</h1>

<p>console.log do -> "Hello World"</p>

<h1>非匿名函数，函数隐式返回最后一个表达式的值</h1>

<p>square = (x) ->
  2 * x
  x * x</p>

<h1>调用函数</h1>

<p>cube   = (x) -> square(x) * x</p>

<h1>函数可以有默认参数</h1>

<p>fill = (container, liquid = "coffee") ->
  console.log "Filling the #{container} with #{liquid}..."</p>

<h1>函数绑定</h1>

<p>setName = (name) -> @name = name;
```</p>

<p>```js 编译后
(function() {
  var cube, fill, setName, square;</p>

<p>  console.log((function() {</p>

<pre><code>return "Hello World";
</code></pre>

<p>  })());</p>

<p>  square = function(x) {</p>

<pre><code>2 * x;
return x * x;
</code></pre>

<p>  };</p>

<p>  cube = function(x) {</p>

<pre><code>return square(x) * x;
</code></pre>

<p>  };</p>

<p>  fill = function(container, liquid) {</p>

<pre><code>if (liquid == null) {
  liquid = "coffee";
}
return console.log("Filling the " + container + " with " + liquid + "...");
</code></pre>

<p>  };</p>

<p>  setName = function(name) {</p>

<pre><code>return this.name = name;
</code></pre>

<p>  };</p>

<p>}).call(this);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffeescript源码篇]]></title>
    <link href="http://ellios.github.com//blog/2012/08/09/coffeescript-source-code/"/>
    <updated>2012-08-09T01:17:00+08:00</updated>
    <id>http://ellios.github.com//blog/2012/08/09/coffeescript-source-code</id>
    <content type="html"><![CDATA[<p>最近为了凑运费，买了本《深入浅出CoffeeScript》，本来只打算随便翻翻的，不过看了以后发现<a href="http://coffeescript.org/">CoffeeScript</a>还是满有意思的，于是决定好好研究下，这里分享下自己的学习过程。</p>

<h4>Install</h4>

<p>装之前需要提前装好node和npm(具体怎么装google之吧)，node和npm装好后，执行下面的命令，就可以开始体验CoffeeScript了。</p>

<p><code>sh
npm install -g coffee-script
</code></p>

<hr />

<h4>Compile</h4>

<p>简单的体验下后，对于它把那么灵活的语法转化为比较工整的JS语法有点小好奇，于是把它的源码clone出来，简单的研究了下。</p>

<p>先试着编译它的源码，编译的操作过程如下：</p>

<p><code>
git clone git://github.com/jashkenas/coffee-script.git
cd coffee-script
bin/cake build:full
</code></p>

<p>OK，编译很迅速，大家可以对源码做各种折腾了。</p>

<hr />

<h4>Jison</h4>

<p>CoffeeScript的核心是一个编译器，它把符合CoffeeScript语法规则的文件转化为JS语法。而CoffeeScript又是利用<a href="http://zaach.github.com/jison/">Jison</a>实现词法和语法的解析。CoffeeScript将语法规则都写到grammar.js文件里，然后利用Jison生成符合该语法规则的编译器。</p>

<p>只要写个简单的语法规则，就可以实现一个编译器，这东西太高级了，于是开始折腾Jison。它的网站上有很多例子，其中有一个生成计算程序的例子，我把它稍微缩减下，让+做-，-做+。</p>

<p>``` python simple_cal.jison
/<em> lexical grammar </em>/
%lex</p>

<p>%%
\s+                   /<em> skip whitespace </em>/
[0-9]+("."[0-9]+)?\b  return 'NUMBER';
"-"                   return '-';
"+"                   return '+';
&lt;<EOF>>               return 'EOF';</p>

<p>/lex</p>

<p>/<em> operator associations and precedence </em>/</p>

<p>%left '+' '-'</p>

<p>%start expressions</p>

<p>%% /<em> language grammar </em>/</p>

<p>expressions</p>

<pre><code>: e EOF
    {typeof console !== 'undefined' ? console.log($1) : print($1);
     return $1;}
;
</code></pre>

<p>e</p>

<pre><code>: e '+' e
    {$$ = $1-$3;}
| e '-' e
    {$$ = $1+$3;}
| NUMBER
    {$$ = Number(yytext);}
;
</code></pre>

<p>```
体验下效果把，当执行7-3时，返回的却是10。</p>

<p>``` sh</p>

<blockquote><blockquote><p>jison simple_cal.jison &amp;&amp; echo "7-3" > 2 &amp;&amp; node simple_cal.js 2
10</p></blockquote></blockquote>

<p>```</p>

<p>再深入的原理，就要涉及编译原理的内容，那个东西偶学得可烂的，以后有时间再研究下把。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://coffeescript.org/">http://coffeescript.org/</a></li>
<li><a href="http://zaach.github.com/jison/">http://zaach.github.com/jison/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
